
final-elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080056fc  080056fc  000066fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005efc  08005efc  00007168  2**0
                  CONTENTS
  4 .ARM          00000008  08005efc  08005efc  00006efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f04  08005f04  00007168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f04  08005f04  00006f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f08  08005f08  00006f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08005f0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007168  2**0
                  CONTENTS
 10 .bss          000006fc  20000168  20000168  00007168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000864  20000864  00007168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139be  00000000  00000000  00007198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b7a  00000000  00000000  0001ab56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  0001d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e10  00000000  00000000  0001e8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca2a  00000000  00000000  0001f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001718c  00000000  00000000  0003c10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a863a  00000000  00000000  00053296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fb8d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000514c  00000000  00000000  000fb914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00100a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056e4 	.word	0x080056e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	080056e4 	.word	0x080056e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <pollinputs>:
int8_t s[3] = {0};
char state = 'I';
const int8_t T = 3;
const int8_t B = 0;

void pollinputs(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOB, FLOOR1_Pin)){
 8000274:	2110      	movs	r1, #16
 8000276:	4810      	ldr	r0, [pc, #64]	@ (80002b8 <pollinputs+0x48>)
 8000278:	f001 fe3a 	bl	8001ef0 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d002      	beq.n	8000288 <pollinputs+0x18>
		s[0] = true;
 8000282:	4b0e      	ldr	r3, [pc, #56]	@ (80002bc <pollinputs+0x4c>)
 8000284:	2201      	movs	r2, #1
 8000286:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(GPIOB, FLOOR2_Pin)){
 8000288:	2120      	movs	r1, #32
 800028a:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <pollinputs+0x48>)
 800028c:	f001 fe30 	bl	8001ef0 <HAL_GPIO_ReadPin>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d002      	beq.n	800029c <pollinputs+0x2c>
		s[1] = true;
 8000296:	4b09      	ldr	r3, [pc, #36]	@ (80002bc <pollinputs+0x4c>)
 8000298:	2201      	movs	r2, #1
 800029a:	705a      	strb	r2, [r3, #1]
	}

	if(HAL_GPIO_ReadPin(GPIOA, FLOOR3_Pin)){
 800029c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a4:	f001 fe24 	bl	8001ef0 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d002      	beq.n	80002b4 <pollinputs+0x44>
		s[2] = true;
 80002ae:	4b03      	ldr	r3, [pc, #12]	@ (80002bc <pollinputs+0x4c>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	709a      	strb	r2, [r3, #2]
	}
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	48000400 	.word	0x48000400
 80002bc:	20000308 	.word	0x20000308

080002c0 <upHandler>:

eSystemState upHandler(){
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	state = 'H';
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <upHandler+0x74>)
 80002c6:	2248      	movs	r2, #72	@ 0x48
 80002c8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ce:	f000 ffe1 	bl	8001294 <HAL_Delay>
	cf++;
 80002d2:	4b19      	ldr	r3, [pc, #100]	@ (8000338 <upHandler+0x78>)
 80002d4:	f993 3000 	ldrsb.w	r3, [r3]
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	3301      	adds	r3, #1
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	b25a      	sxtb	r2, r3
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <upHandler+0x78>)
 80002e2:	701a      	strb	r2, [r3, #0]
	if(cf >= T){
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <upHandler+0x78>)
 80002e6:	f993 3000 	ldrsb.w	r3, [r3]
 80002ea:	2203      	movs	r2, #3
 80002ec:	4293      	cmp	r3, r2
 80002ee:	db04      	blt.n	80002fa <upHandler+0x3a>
		cf = T;
 80002f0:	2203      	movs	r2, #3
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <upHandler+0x78>)
 80002f4:	701a      	strb	r2, [r3, #0]
		return IDLE;
 80002f6:	2302      	movs	r3, #2
 80002f8:	e019      	b.n	800032e <upHandler+0x6e>
	}
	pollinputs();
 80002fa:	f7ff ffb9 	bl	8000270 <pollinputs>
	if(s[cf] == true){
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <upHandler+0x78>)
 8000300:	f993 3000 	ldrsb.w	r3, [r3]
 8000304:	461a      	mov	r2, r3
 8000306:	4b0d      	ldr	r3, [pc, #52]	@ (800033c <upHandler+0x7c>)
 8000308:	569b      	ldrsb	r3, [r3, r2]
 800030a:	2b01      	cmp	r3, #1
 800030c:	d104      	bne.n	8000318 <upHandler+0x58>
		ct = cf;
 800030e:	4b0a      	ldr	r3, [pc, #40]	@ (8000338 <upHandler+0x78>)
 8000310:	f993 2000 	ldrsb.w	r2, [r3]
 8000314:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <upHandler+0x80>)
 8000316:	701a      	strb	r2, [r3, #0]
	}
	if(cf < ct){
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <upHandler+0x78>)
 800031a:	f993 2000 	ldrsb.w	r2, [r3]
 800031e:	4b08      	ldr	r3, [pc, #32]	@ (8000340 <upHandler+0x80>)
 8000320:	f993 3000 	ldrsb.w	r3, [r3]
 8000324:	429a      	cmp	r2, r3
 8000326:	da01      	bge.n	800032c <upHandler+0x6c>
		return UP;
 8000328:	2300      	movs	r3, #0
 800032a:	e000      	b.n	800032e <upHandler+0x6e>
	}
	return IDLE;
 800032c:	2302      	movs	r3, #2
}
 800032e:	4618      	mov	r0, r3
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000100 	.word	0x20000100
 8000338:	20000304 	.word	0x20000304
 800033c:	20000308 	.word	0x20000308
 8000340:	20000305 	.word	0x20000305

08000344 <downHandler>:

eSystemState downHandler(){
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	state = 'D';
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <downHandler+0x74>)
 800034a:	2244      	movs	r2, #68	@ 0x44
 800034c:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000);
 800034e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000352:	f000 ff9f 	bl	8001294 <HAL_Delay>
	cf--;
 8000356:	4b19      	ldr	r3, [pc, #100]	@ (80003bc <downHandler+0x78>)
 8000358:	f993 3000 	ldrsb.w	r3, [r3]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	3b01      	subs	r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	b25a      	sxtb	r2, r3
 8000364:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <downHandler+0x78>)
 8000366:	701a      	strb	r2, [r3, #0]
	if(cf <= B){
 8000368:	4b14      	ldr	r3, [pc, #80]	@ (80003bc <downHandler+0x78>)
 800036a:	f993 3000 	ldrsb.w	r3, [r3]
 800036e:	2200      	movs	r2, #0
 8000370:	4293      	cmp	r3, r2
 8000372:	dc04      	bgt.n	800037e <downHandler+0x3a>
		cf = B;
 8000374:	2200      	movs	r2, #0
 8000376:	4b11      	ldr	r3, [pc, #68]	@ (80003bc <downHandler+0x78>)
 8000378:	701a      	strb	r2, [r3, #0]
		return IDLE;
 800037a:	2302      	movs	r3, #2
 800037c:	e019      	b.n	80003b2 <downHandler+0x6e>
	}
	pollinputs();
 800037e:	f7ff ff77 	bl	8000270 <pollinputs>
	if(s[cf] == true){
 8000382:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <downHandler+0x78>)
 8000384:	f993 3000 	ldrsb.w	r3, [r3]
 8000388:	461a      	mov	r2, r3
 800038a:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <downHandler+0x7c>)
 800038c:	569b      	ldrsb	r3, [r3, r2]
 800038e:	2b01      	cmp	r3, #1
 8000390:	d104      	bne.n	800039c <downHandler+0x58>
		ct = cf;
 8000392:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <downHandler+0x78>)
 8000394:	f993 2000 	ldrsb.w	r2, [r3]
 8000398:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <downHandler+0x80>)
 800039a:	701a      	strb	r2, [r3, #0]
	}
	if(cf > ct){
 800039c:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <downHandler+0x78>)
 800039e:	f993 2000 	ldrsb.w	r2, [r3]
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <downHandler+0x80>)
 80003a4:	f993 3000 	ldrsb.w	r3, [r3]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	dd01      	ble.n	80003b0 <downHandler+0x6c>
		return DOWN;
 80003ac:	2301      	movs	r3, #1
 80003ae:	e000      	b.n	80003b2 <downHandler+0x6e>
	}
	return IDLE;
 80003b0:	2302      	movs	r3, #2
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000100 	.word	0x20000100
 80003bc:	20000304 	.word	0x20000304
 80003c0:	20000308 	.word	0x20000308
 80003c4:	20000305 	.word	0x20000305

080003c8 <idleHandler>:

eSystemState idleHandler(){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	// handle polling
	state = 'I';
 80003cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <idleHandler+0x40>)
 80003ce:	2249      	movs	r2, #73	@ 0x49
 80003d0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(500);
 80003d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003d6:	f000 ff5d 	bl	8001294 <HAL_Delay>
	if(cf < ct){
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <idleHandler+0x44>)
 80003dc:	f993 2000 	ldrsb.w	r2, [r3]
 80003e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <idleHandler+0x48>)
 80003e2:	f993 3000 	ldrsb.w	r3, [r3]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	da01      	bge.n	80003ee <idleHandler+0x26>
		return UP;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e00a      	b.n	8000404 <idleHandler+0x3c>
	}
	if(cf == ct){
 80003ee:	4b07      	ldr	r3, [pc, #28]	@ (800040c <idleHandler+0x44>)
 80003f0:	f993 2000 	ldrsb.w	r2, [r3]
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <idleHandler+0x48>)
 80003f6:	f993 3000 	ldrsb.w	r3, [r3]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d101      	bne.n	8000402 <idleHandler+0x3a>
		return BOARDING;
 80003fe:	2303      	movs	r3, #3
 8000400:	e000      	b.n	8000404 <idleHandler+0x3c>
	}

	return IDLE;
 8000402:	2302      	movs	r3, #2
}
 8000404:	4618      	mov	r0, r3
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000100 	.word	0x20000100
 800040c:	20000304 	.word	0x20000304
 8000410:	20000305 	.word	0x20000305

08000414 <boardingHandler>:

eSystemState boardingHandler(){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	state = 'B';
 800041a:	4b12      	ldr	r3, [pc, #72]	@ (8000464 <boardingHandler+0x50>)
 800041c:	2242      	movs	r2, #66	@ 0x42
 800041e:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	71fb      	strb	r3, [r7, #7]
	while(count++ < 10){
 8000424:	e00d      	b.n	8000442 <boardingHandler+0x2e>
		HAL_TIM_Base_Start(&htim2);
 8000426:	4810      	ldr	r0, [pc, #64]	@ (8000468 <boardingHandler+0x54>)
 8000428:	f003 fe24 	bl	8004074 <HAL_TIM_Base_Start>
		__HAL_TIM_SET_AUTORELOAD(&htim2, sine);
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <boardingHandler+0x54>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <boardingHandler+0x58>)
 8000432:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000434:	4a0d      	ldr	r2, [pc, #52]	@ (800046c <boardingHandler+0x58>)
 8000436:	4b0c      	ldr	r3, [pc, #48]	@ (8000468 <boardingHandler+0x54>)
 8000438:	60da      	str	r2, [r3, #12]
		HAL_TIM_GenerateEvent(&htim2, TIM_EVENTSOURCE_UPDATE);
 800043a:	2101      	movs	r1, #1
 800043c:	480a      	ldr	r0, [pc, #40]	@ (8000468 <boardingHandler+0x54>)
 800043e:	f003 fe94 	bl	800416a <HAL_TIM_GenerateEvent>
	while(count++ < 10){
 8000442:	79fb      	ldrb	r3, [r7, #7]
 8000444:	1c5a      	adds	r2, r3, #1
 8000446:	71fa      	strb	r2, [r7, #7]
 8000448:	2b09      	cmp	r3, #9
 800044a:	d9ec      	bls.n	8000426 <boardingHandler+0x12>
	  }
	HAL_TIM_Base_Stop(&htim2);
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <boardingHandler+0x54>)
 800044e:	f003 fe65 	bl	800411c <HAL_TIM_Base_Stop>
	HAL_Delay(3000);
 8000452:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000456:	f000 ff1d 	bl	8001294 <HAL_Delay>
	//s[cf] = false;
	return IDLE;
 800045a:	2302      	movs	r3, #2
}
 800045c:	4618      	mov	r0, r3
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	20000100 	.word	0x20000100
 8000468:	20000230 	.word	0x20000230
 800046c:	20000000 	.word	0x20000000

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b08b      	sub	sp, #44	@ 0x2c
 8000474:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 fea7 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f8bf 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 fa15 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000482:	f000 f9f5 	bl	8000870 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000486:	f000 f9c3 	bl	8000810 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800048a:	f000 f933 	bl	80006f4 <MX_I2C1_Init>
  MX_DAC1_Init();
 800048e:	f000 f907 	bl	80006a0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000492:	f000 f96f 	bl	8000774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) sine, SAMPLESIZE, DAC_ALIGN_8B_R);
 8000496:	2308      	movs	r3, #8
 8000498:	9300      	str	r3, [sp, #0]
 800049a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800049e:	4a4e      	ldr	r2, [pc, #312]	@ (80005d8 <main+0x168>)
 80004a0:	2100      	movs	r1, #0
 80004a2:	484e      	ldr	r0, [pc, #312]	@ (80005dc <main+0x16c>)
 80004a4:	f001 f86c 	bl	8001580 <HAL_DAC_Start_DMA>

  ssd1306_Init();
 80004a8:	f000 faa6 	bl	80009f8 <ssd1306_Init>
  char text[20] = {0};
 80004ac:	2300      	movs	r3, #0
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
 80004b6:	605a      	str	r2, [r3, #4]
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	60da      	str	r2, [r3, #12]
  uint8_t counter = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	75fb      	strb	r3, [r7, #23]
  ssd1306_Fill(Black);
 80004c0:	2000      	movs	r0, #0
 80004c2:	f000 fb03 	bl	8000acc <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80004c6:	f000 fb25 	bl	8000b14 <ssd1306_UpdateScreen>

  eSystemState currentstate = IDLE;
 80004ca:	2302      	movs	r3, #2
 80004cc:	75bb      	strb	r3, [r7, #22]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(text, "cf 1 2 3 s count", s[0], s[1], s[2]);
 80004ce:	4b44      	ldr	r3, [pc, #272]	@ (80005e0 <main+0x170>)
 80004d0:	f993 3000 	ldrsb.w	r3, [r3]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b42      	ldr	r3, [pc, #264]	@ (80005e0 <main+0x170>)
 80004d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80004dc:	4619      	mov	r1, r3
 80004de:	4b40      	ldr	r3, [pc, #256]	@ (80005e0 <main+0x170>)
 80004e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80004e4:	4638      	mov	r0, r7
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	460b      	mov	r3, r1
 80004ea:	493e      	ldr	r1, [pc, #248]	@ (80005e4 <main+0x174>)
 80004ec:	f004 fc5a 	bl	8004da4 <siprintf>
	  ssd1306_SetCursor(1, 1);
 80004f0:	2101      	movs	r1, #1
 80004f2:	2001      	movs	r0, #1
 80004f4:	f000 fc38 	bl	8000d68 <ssd1306_SetCursor>
	  ssd1306_WriteString(text, Font_7x10, White);
 80004f8:	4a3b      	ldr	r2, [pc, #236]	@ (80005e8 <main+0x178>)
 80004fa:	4638      	mov	r0, r7
 80004fc:	2301      	movs	r3, #1
 80004fe:	ca06      	ldmia	r2, {r1, r2}
 8000500:	f000 fc0c 	bl	8000d1c <ssd1306_WriteString>
	  sprintf(text, "%d  %d %d %d %c %d", cf, s[0], s[1], s[2], state, counter);
 8000504:	4b39      	ldr	r3, [pc, #228]	@ (80005ec <main+0x17c>)
 8000506:	f993 3000 	ldrsb.w	r3, [r3]
 800050a:	461d      	mov	r5, r3
 800050c:	4b34      	ldr	r3, [pc, #208]	@ (80005e0 <main+0x170>)
 800050e:	f993 3000 	ldrsb.w	r3, [r3]
 8000512:	461e      	mov	r6, r3
 8000514:	4b32      	ldr	r3, [pc, #200]	@ (80005e0 <main+0x170>)
 8000516:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800051a:	461a      	mov	r2, r3
 800051c:	4b30      	ldr	r3, [pc, #192]	@ (80005e0 <main+0x170>)
 800051e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8000522:	4619      	mov	r1, r3
 8000524:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <main+0x180>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	461c      	mov	r4, r3
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	4638      	mov	r0, r7
 800052e:	9303      	str	r3, [sp, #12]
 8000530:	9402      	str	r4, [sp, #8]
 8000532:	9101      	str	r1, [sp, #4]
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	4633      	mov	r3, r6
 8000538:	462a      	mov	r2, r5
 800053a:	492e      	ldr	r1, [pc, #184]	@ (80005f4 <main+0x184>)
 800053c:	f004 fc32 	bl	8004da4 <siprintf>
	  ssd1306_SetCursor(1, 25);
 8000540:	2119      	movs	r1, #25
 8000542:	2001      	movs	r0, #1
 8000544:	f000 fc10 	bl	8000d68 <ssd1306_SetCursor>
	  ssd1306_WriteString(text, Font_7x10, White);
 8000548:	4a27      	ldr	r2, [pc, #156]	@ (80005e8 <main+0x178>)
 800054a:	4638      	mov	r0, r7
 800054c:	2301      	movs	r3, #1
 800054e:	ca06      	ldmia	r2, {r1, r2}
 8000550:	f000 fbe4 	bl	8000d1c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000554:	f000 fade 	bl	8000b14 <ssd1306_UpdateScreen>
	  counter++;
 8000558:	7dfb      	ldrb	r3, [r7, #23]
 800055a:	3301      	adds	r3, #1
 800055c:	75fb      	strb	r3, [r7, #23]

	  for(uint8_t i = 0; i < 3; i++){
 800055e:	2300      	movs	r3, #0
 8000560:	757b      	strb	r3, [r7, #21]
 8000562:	e013      	b.n	800058c <main+0x11c>
		  if(s[i] == true && cf == ct){
 8000564:	7d7b      	ldrb	r3, [r7, #21]
 8000566:	4a1e      	ldr	r2, [pc, #120]	@ (80005e0 <main+0x170>)
 8000568:	56d3      	ldrsb	r3, [r2, r3]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d10b      	bne.n	8000586 <main+0x116>
 800056e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ec <main+0x17c>)
 8000570:	f993 2000 	ldrsb.w	r2, [r3]
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <main+0x188>)
 8000576:	f993 3000 	ldrsb.w	r3, [r3]
 800057a:	429a      	cmp	r2, r3
 800057c:	d103      	bne.n	8000586 <main+0x116>
			  s[i] = false;
 800057e:	7d7b      	ldrb	r3, [r7, #21]
 8000580:	4a17      	ldr	r2, [pc, #92]	@ (80005e0 <main+0x170>)
 8000582:	2100      	movs	r1, #0
 8000584:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t i = 0; i < 3; i++){
 8000586:	7d7b      	ldrb	r3, [r7, #21]
 8000588:	3301      	adds	r3, #1
 800058a:	757b      	strb	r3, [r7, #21]
 800058c:	7d7b      	ldrb	r3, [r7, #21]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d9e8      	bls.n	8000564 <main+0xf4>
		  }
	  }
	  HAL_Delay(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000596:	f000 fe7d 	bl	8001294 <HAL_Delay>
	   * UP
	   * DOWN
	   * IDLE
	   * BOARDING
	   */
	  switch(currentstate){
 800059a:	7dbb      	ldrb	r3, [r7, #22]
 800059c:	2b03      	cmp	r3, #3
 800059e:	d010      	beq.n	80005c2 <main+0x152>
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	dc13      	bgt.n	80005cc <main+0x15c>
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <main+0x13e>
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d005      	beq.n	80005b8 <main+0x148>
 80005ac:	e00e      	b.n	80005cc <main+0x15c>
	  case UP:
		  currentstate = upHandler();
 80005ae:	f7ff fe87 	bl	80002c0 <upHandler>
 80005b2:	4603      	mov	r3, r0
 80005b4:	75bb      	strb	r3, [r7, #22]
		  break;
 80005b6:	e00e      	b.n	80005d6 <main+0x166>
	  case DOWN:
		  currentstate = downHandler();
 80005b8:	f7ff fec4 	bl	8000344 <downHandler>
 80005bc:	4603      	mov	r3, r0
 80005be:	75bb      	strb	r3, [r7, #22]
		  break;
 80005c0:	e009      	b.n	80005d6 <main+0x166>
	  case BOARDING:
		  currentstate = boardingHandler();
 80005c2:	f7ff ff27 	bl	8000414 <boardingHandler>
 80005c6:	4603      	mov	r3, r0
 80005c8:	75bb      	strb	r3, [r7, #22]
		  break;
 80005ca:	e004      	b.n	80005d6 <main+0x166>
	  default:
		  currentstate = idleHandler();
 80005cc:	f7ff fefc 	bl	80003c8 <idleHandler>
 80005d0:	4603      	mov	r3, r0
 80005d2:	75bb      	strb	r3, [r7, #22]
		  break;
 80005d4:	bf00      	nop
	  sprintf(text, "cf 1 2 3 s count", s[0], s[1], s[2]);
 80005d6:	e77a      	b.n	80004ce <main+0x5e>
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000184 	.word	0x20000184
 80005e0:	20000308 	.word	0x20000308
 80005e4:	080056fc 	.word	0x080056fc
 80005e8:	20000104 	.word	0x20000104
 80005ec:	20000304 	.word	0x20000304
 80005f0:	20000100 	.word	0x20000100
 80005f4:	08005710 	.word	0x08005710
 80005f8:	20000305 	.word	0x20000305

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000606:	2228      	movs	r2, #40	@ 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f004 fc04 	bl	8004e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]
 800062e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f939 	bl	80028bc <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000650:	f000 f992 	bl	8000978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f962 	bl	8003938 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800067a:	f000 f97d 	bl	8000978 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800067e:	2320      	movs	r3, #32
 8000680:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fb75 	bl	8003d78 <HAL_RCCEx_PeriphCLKConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000694:	f000 f970 	bl	8000978 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3758      	adds	r7, #88	@ 0x58
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_DAC1_Init+0x4c>)
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <MX_DAC1_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006b6:	480d      	ldr	r0, [pc, #52]	@ (80006ec <MX_DAC1_Init+0x4c>)
 80006b8:	f000 ff21 	bl	80014fe <HAL_DAC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80006c2:	f000 f959 	bl	8000978 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80006c6:	2324      	movs	r3, #36	@ 0x24
 80006c8:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_DAC1_Init+0x4c>)
 80006d6:	f001 f80f 	bl	80016f8 <HAL_DAC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 80006e0:	f000 f94a 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000184 	.word	0x20000184
 80006f0:	40007400 	.word	0x40007400

080006f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000768 <MX_I2C1_Init+0x74>)
 80006fa:	4a1c      	ldr	r2, [pc, #112]	@ (800076c <MX_I2C1_Init+0x78>)
 80006fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <MX_I2C1_Init+0x7c>)
 8000702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000704:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070a:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <MX_I2C1_Init+0x74>)
 800070c:	2201      	movs	r2, #1
 800070e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_I2C1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000730:	f001 fc0e 	bl	8001f50 <HAL_I2C_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073a:	f000 f91d 	bl	8000978 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073e:	2100      	movs	r1, #0
 8000740:	4809      	ldr	r0, [pc, #36]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000742:	f002 f823 	bl	800278c <HAL_I2CEx_ConfigAnalogFilter>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800074c:	f000 f914 	bl	8000978 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000750:	2100      	movs	r1, #0
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_I2C1_Init+0x74>)
 8000754:	f002 f865 	bl	8002822 <HAL_I2CEx_ConfigDigitalFilter>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 f90b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200001dc 	.word	0x200001dc
 800076c:	40005400 	.word	0x40005400
 8000770:	0010020a 	.word	0x0010020a

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0310 	add.w	r3, r7, #16
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <MX_TIM2_Init+0x98>)
 8000794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM2_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_TIM2_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_TIM2_Init+0x98>)
 80007a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM2_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_TIM2_Init+0x98>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007ba:	4814      	ldr	r0, [pc, #80]	@ (800080c <MX_TIM2_Init+0x98>)
 80007bc:	f003 fc02 	bl	8003fc4 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80007c6:	f000 f8d7 	bl	8000978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_TIM2_Init+0x98>)
 80007d8:	f003 fcee 	bl	80041b8 <HAL_TIM_ConfigClockSource>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80007e2:	f000 f8c9 	bl	8000978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_TIM2_Init+0x98>)
 80007f4:	f003 fec8 	bl	8004588 <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80007fe:	f000 f8bb 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000230 	.word	0x20000230

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	@ (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800081a:	4b13      	ldr	r3, [pc, #76]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	@ (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f003 ff06 	bl	8004664 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f88b 	bl	8000978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000027c 	.word	0x2000027c
 800086c:	40004400 	.word	0x40004400

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_DMA_Init+0x38>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a0b      	ldr	r2, [pc, #44]	@ (80008a8 <MX_DMA_Init+0x38>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_DMA_Init+0x38>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200d      	movs	r0, #13
 8000894:	f000 fdfd 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000898:	200d      	movs	r0, #13
 800089a:	f000 fe16 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008cc:	6153      	str	r3, [r2, #20]
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008dc:	695b      	ldr	r3, [r3, #20]
 80008de:	4a24      	ldr	r2, [pc, #144]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e4:	6153      	str	r3, [r2, #20]
 80008e6:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000970 <MX_GPIO_Init+0xc4>)
 80008f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008fc:	6153      	str	r3, [r2, #20]
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <MX_GPIO_Init+0xc4>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DOORS_GPIO_Port, DOORS_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	2101      	movs	r1, #1
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f001 fb05 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DOORS_Pin */
  GPIO_InitStruct.Pin = DOORS_Pin;
 8000916:	2301      	movs	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DOORS_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000930:	f001 f96c 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLOOR3_Pin */
  GPIO_InitStruct.Pin = FLOOR3_Pin;
 8000934:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800093e:	2302      	movs	r3, #2
 8000940:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FLOOR3_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f001 f95e 	bl	8001c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : FLOOR1_Pin FLOOR2_Pin */
  GPIO_InitStruct.Pin = FLOOR1_Pin|FLOOR2_Pin;
 8000950:	2330      	movs	r3, #48	@ 0x30
 8000952:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000958:	2302      	movs	r3, #2
 800095a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4804      	ldr	r0, [pc, #16]	@ (8000974 <MX_GPIO_Init+0xc8>)
 8000964:	f001 f952 	bl	8001c0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	48000400 	.word	0x48000400

08000978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800097c:	b672      	cpsid	i
}
 800097e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <Error_Handler+0x8>

08000984 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af04      	add	r7, sp, #16
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	9302      	str	r3, [sp, #8]
 80009a4:	2301      	movs	r3, #1
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2301      	movs	r3, #1
 80009ae:	2200      	movs	r2, #0
 80009b0:	2178      	movs	r1, #120	@ 0x78
 80009b2:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <ssd1306_WriteCommand+0x2c>)
 80009b4:	f001 fb68 	bl	8002088 <HAL_I2C_Mem_Write>
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001dc 	.word	0x200001dc

080009c4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af04      	add	r7, sp, #16
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	f04f 32ff 	mov.w	r2, #4294967295
 80009d6:	9202      	str	r2, [sp, #8]
 80009d8:	9301      	str	r3, [sp, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2301      	movs	r3, #1
 80009e0:	2240      	movs	r2, #64	@ 0x40
 80009e2:	2178      	movs	r1, #120	@ 0x78
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <ssd1306_WriteData+0x30>)
 80009e6:	f001 fb4f 	bl	8002088 <HAL_I2C_Mem_Write>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001dc 	.word	0x200001dc

080009f8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80009fc:	f7ff ffc2 	bl	8000984 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000a00:	2064      	movs	r0, #100	@ 0x64
 8000a02:	f000 fc47 	bl	8001294 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f9da 	bl	8000dc0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000a0c:	2020      	movs	r0, #32
 8000a0e:	f7ff ffc1 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ffbe 	bl	8000994 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000a18:	20b0      	movs	r0, #176	@ 0xb0
 8000a1a:	f7ff ffbb 	bl	8000994 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000a1e:	20c8      	movs	r0, #200	@ 0xc8
 8000a20:	f7ff ffb8 	bl	8000994 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ffb5 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f7ff ffb2 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000a30:	2040      	movs	r0, #64	@ 0x40
 8000a32:	f7ff ffaf 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000a36:	20ff      	movs	r0, #255	@ 0xff
 8000a38:	f000 f9ae 	bl	8000d98 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000a3c:	20a1      	movs	r0, #161	@ 0xa1
 8000a3e:	f7ff ffa9 	bl	8000994 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000a42:	20a6      	movs	r0, #166	@ 0xa6
 8000a44:	f7ff ffa6 	bl	8000994 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000a48:	20a8      	movs	r0, #168	@ 0xa8
 8000a4a:	f7ff ffa3 	bl	8000994 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000a4e:	203f      	movs	r0, #63	@ 0x3f
 8000a50:	f7ff ffa0 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a54:	20a4      	movs	r0, #164	@ 0xa4
 8000a56:	f7ff ff9d 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000a5a:	20d3      	movs	r0, #211	@ 0xd3
 8000a5c:	f7ff ff9a 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff ff97 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a66:	20d5      	movs	r0, #213	@ 0xd5
 8000a68:	f7ff ff94 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000a6c:	20f0      	movs	r0, #240	@ 0xf0
 8000a6e:	f7ff ff91 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000a72:	20d9      	movs	r0, #217	@ 0xd9
 8000a74:	f7ff ff8e 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000a78:	2022      	movs	r0, #34	@ 0x22
 8000a7a:	f7ff ff8b 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000a7e:	20da      	movs	r0, #218	@ 0xda
 8000a80:	f7ff ff88 	bl	8000994 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000a84:	2012      	movs	r0, #18
 8000a86:	f7ff ff85 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000a8a:	20db      	movs	r0, #219	@ 0xdb
 8000a8c:	f7ff ff82 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000a90:	2020      	movs	r0, #32
 8000a92:	f7ff ff7f 	bl	8000994 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000a96:	208d      	movs	r0, #141	@ 0x8d
 8000a98:	f7ff ff7c 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000a9c:	2014      	movs	r0, #20
 8000a9e:	f7ff ff79 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 f98c 	bl	8000dc0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 f80f 	bl	8000acc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000aae:	f000 f831 	bl	8000b14 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <ssd1306_Init+0xd0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <ssd1306_Init+0xd0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000abe:	4b02      	ldr	r3, [pc, #8]	@ (8000ac8 <ssd1306_Init+0xd0>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	711a      	strb	r2, [r3, #4]
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000070c 	.word	0x2000070c

08000acc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	e00d      	b.n	8000af8 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <ssd1306_Fill+0x1a>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	e000      	b.n	8000ae8 <ssd1306_Fill+0x1c>
 8000ae6:	21ff      	movs	r1, #255	@ 0xff
 8000ae8:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <ssd1306_Fill+0x44>)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4413      	add	r3, r2
 8000aee:	460a      	mov	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000afe:	d3ed      	bcc.n	8000adc <ssd1306_Fill+0x10>
    }
}
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	2000030c 	.word	0x2000030c

08000b14 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	71fb      	strb	r3, [r7, #7]
 8000b1e:	e016      	b.n	8000b4e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	3b50      	subs	r3, #80	@ 0x50
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff34 	bl	8000994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	f7ff ff31 	bl	8000994 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b32:	2010      	movs	r0, #16
 8000b34:	f7ff ff2e 	bl	8000994 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	01db      	lsls	r3, r3, #7
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <ssd1306_UpdateScreen+0x4c>)
 8000b3e:	4413      	add	r3, r2
 8000b40:	2180      	movs	r1, #128	@ 0x80
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff ff3e 	bl	80009c4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d9e5      	bls.n	8000b20 <ssd1306_UpdateScreen+0xc>
    }
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000030c 	.word	0x2000030c

08000b64 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	71bb      	strb	r3, [r7, #6]
 8000b72:	4613      	mov	r3, r2
 8000b74:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db3d      	blt.n	8000bfa <ssd1306_DrawPixel+0x96>
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b82:	d83a      	bhi.n	8000bfa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000b84:	797b      	ldrb	r3, [r7, #5]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d11a      	bne.n	8000bc0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	79bb      	ldrb	r3, [r7, #6]
 8000b8e:	08db      	lsrs	r3, r3, #3
 8000b90:	b2d8      	uxtb	r0, r3
 8000b92:	4603      	mov	r3, r0
 8000b94:	01db      	lsls	r3, r3, #7
 8000b96:	4413      	add	r3, r2
 8000b98:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <ssd1306_DrawPixel+0xa4>)
 8000b9a:	5cd3      	ldrb	r3, [r2, r3]
 8000b9c:	b25a      	sxtb	r2, r3
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b259      	sxtb	r1, r3
 8000bb0:	79fa      	ldrb	r2, [r7, #7]
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	01db      	lsls	r3, r3, #7
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b2c9      	uxtb	r1, r1
 8000bba:	4a13      	ldr	r2, [pc, #76]	@ (8000c08 <ssd1306_DrawPixel+0xa4>)
 8000bbc:	54d1      	strb	r1, [r2, r3]
 8000bbe:	e01d      	b.n	8000bfc <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	b2d8      	uxtb	r0, r3
 8000bc8:	4603      	mov	r3, r0
 8000bca:	01db      	lsls	r3, r3, #7
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a0e      	ldr	r2, [pc, #56]	@ (8000c08 <ssd1306_DrawPixel+0xa4>)
 8000bd0:	5cd3      	ldrb	r3, [r2, r3]
 8000bd2:	b25a      	sxtb	r2, r3
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	2101      	movs	r1, #1
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	b25b      	sxtb	r3, r3
 8000be6:	4013      	ands	r3, r2
 8000be8:	b259      	sxtb	r1, r3
 8000bea:	79fa      	ldrb	r2, [r7, #7]
 8000bec:	4603      	mov	r3, r0
 8000bee:	01db      	lsls	r3, r3, #7
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2c9      	uxtb	r1, r1
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <ssd1306_DrawPixel+0xa4>)
 8000bf6:	54d1      	strb	r1, [r2, r3]
 8000bf8:	e000      	b.n	8000bfc <ssd1306_DrawPixel+0x98>
        return;
 8000bfa:	bf00      	nop
    }
}
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	2000030c 	.word	0x2000030c

08000c0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4604      	mov	r4, r0
 8000c14:	1d38      	adds	r0, r7, #4
 8000c16:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4623      	mov	r3, r4
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	4613      	mov	r3, r2
 8000c22:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b1f      	cmp	r3, #31
 8000c28:	d902      	bls.n	8000c30 <ssd1306_WriteChar+0x24>
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b7e      	cmp	r3, #126	@ 0x7e
 8000c2e:	d901      	bls.n	8000c34 <ssd1306_WriteChar+0x28>
        return 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e06c      	b.n	8000d0e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c34:	4b38      	ldr	r3, [pc, #224]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	793b      	ldrb	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2b80      	cmp	r3, #128	@ 0x80
 8000c40:	dc06      	bgt.n	8000c50 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000c42:	4b35      	ldr	r3, [pc, #212]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000c44:	885b      	ldrh	r3, [r3, #2]
 8000c46:	461a      	mov	r2, r3
 8000c48:	797b      	ldrb	r3, [r7, #5]
 8000c4a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000c4c:	2b40      	cmp	r3, #64	@ 0x40
 8000c4e:	dd01      	ble.n	8000c54 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e05c      	b.n	8000d0e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	e04c      	b.n	8000cf4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	3b20      	subs	r3, #32
 8000c60:	7979      	ldrb	r1, [r7, #5]
 8000c62:	fb01 f303 	mul.w	r3, r1, r3
 8000c66:	4619      	mov	r1, r3
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	440b      	add	r3, r1
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	e034      	b.n	8000ce4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d012      	beq.n	8000cb0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c8a:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	b2d8      	uxtb	r0, r3
 8000c98:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000c9a:	885b      	ldrh	r3, [r3, #2]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	7bba      	ldrb	r2, [r7, #14]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f7ff ff5b 	bl	8000b64 <ssd1306_DrawPixel>
 8000cae:	e016      	b.n	8000cde <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2d8      	uxtb	r0, r3
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000cc0:	885b      	ldrh	r3, [r3, #2]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	7bbb      	ldrb	r3, [r7, #14]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bf0c      	ite	eq
 8000cd2:	2301      	moveq	r3, #1
 8000cd4:	2300      	movne	r3, #0
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f7ff ff43 	bl	8000b64 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
 8000ce4:	793b      	ldrb	r3, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d3c5      	bcc.n	8000c7a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	797b      	ldrb	r3, [r7, #5]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d3ad      	bcc.n	8000c5a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	793a      	ldrb	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <ssd1306_WriteChar+0x10c>)
 8000d0a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	@ 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000070c 	.word	0x2000070c

08000d1c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	1d38      	adds	r0, r7, #4
 8000d26:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d2a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000d2c:	e012      	b.n	8000d54 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	7818      	ldrb	r0, [r3, #0]
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	1d3a      	adds	r2, r7, #4
 8000d36:	ca06      	ldmia	r2, {r1, r2}
 8000d38:	f7ff ff68 	bl	8000c0c <ssd1306_WriteChar>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d002      	beq.n	8000d4e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	e008      	b.n	8000d60 <ssd1306_WriteString+0x44>
        }
        str++;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	3301      	adds	r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1e8      	bne.n	8000d2e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <ssd1306_SetCursor+0x2c>)
 8000d7e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <ssd1306_SetCursor+0x2c>)
 8000d86:	805a      	strh	r2, [r3, #2]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	2000070c 	.word	0x2000070c

08000d98 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000da2:	2381      	movs	r3, #129	@ 0x81
 8000da4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fdf3 	bl	8000994 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fdef 	bl	8000994 <ssd1306_WriteCommand>
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d005      	beq.n	8000ddc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000dd0:	23af      	movs	r3, #175	@ 0xaf
 8000dd2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <ssd1306_SetDisplayOn+0x38>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	715a      	strb	r2, [r3, #5]
 8000dda:	e004      	b.n	8000de6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ddc:	23ae      	movs	r3, #174	@ 0xae
 8000dde:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <ssd1306_SetDisplayOn+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fdd3 	bl	8000994 <ssd1306_WriteCommand>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000070c 	.word	0x2000070c

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a08      	ldr	r2, [pc, #32]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	@ 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2b      	ldr	r2, [pc, #172]	@ (8000f10 <HAL_DAC_MspInit+0xcc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d150      	bne.n	8000f08 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b25      	ldr	r3, [pc, #148]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a24      	ldr	r2, [pc, #144]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b22      	ldr	r3, [pc, #136]	@ (8000f14 <HAL_DAC_MspInit+0xd0>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e96:	2310      	movs	r3, #16
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eac:	f000 feae 	bl	8001c0c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f1c <HAL_DAC_MspInit+0xd8>)
 8000eb4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eb8:	2210      	movs	r2, #16
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec8:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000ee2:	f000 fcfb 	bl	80018dc <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_DAC_MspInit+0xac>
    {
      Error_Handler();
 8000eec:	f7ff fd44 	bl	8000978 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_DAC_MspInit+0xdc>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_DAC_MspInit+0xdc>)
 8000ef6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000efa:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <HAL_DAC_MspInit+0xd4>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40007400 	.word	0x40007400
 8000f14:	40021000 	.word	0x40021000
 8000f18:	20000198 	.word	0x20000198
 8000f1c:	40020030 	.word	0x40020030
 8000f20:	40010000 	.word	0x40010000

08000f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a17      	ldr	r2, [pc, #92]	@ (8000fa0 <HAL_I2C_MspInit+0x7c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d127      	bne.n	8000f96 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f62:	2312      	movs	r3, #18
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f7a:	f000 fe47 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_I2C_MspInit+0x80>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fbc:	d10b      	bne.n	8000fd6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	4a08      	ldr	r2, [pc, #32]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	61d3      	str	r3, [r2, #28]
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_TIM_Base_MspInit+0x38>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a18      	ldr	r2, [pc, #96]	@ (8001068 <HAL_UART_MspInit+0x80>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d129      	bne.n	800105e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_UART_MspInit+0x84>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a17      	ldr	r2, [pc, #92]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800102c:	6153      	str	r3, [r2, #20]
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_UART_MspInit+0x84>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800103a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800105a:	f000 fdd7 	bl	8001c0c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	@ 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004400 	.word	0x40004400
 800106c:	40021000 	.word	0x40021000

08001070 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <NMI_Handler+0x4>

08001078 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <MemManage_Handler+0x4>

08001088 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <BusFault_Handler+0x4>

08001090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <UsageFault_Handler+0x4>

08001098 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c6:	f000 f8c5 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80010d4:	4802      	ldr	r0, [pc, #8]	@ (80010e0 <DMA1_Channel3_IRQHandler+0x10>)
 80010d6:	f000 fca7 	bl	8001a28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000198 	.word	0x20000198

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f003 fe88 	bl	8004e28 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20003000 	.word	0x20003000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000714 	.word	0x20000714
 800114c:	20000868 	.word	0x20000868

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff ffea 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	@ (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f003 fe47 	bl	8004e34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff f963 	bl	8000470 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80011b8:	08005f0c 	.word	0x08005f0c
  ldr r2, =_sbss
 80011bc:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80011c0:	20000864 	.word	0x20000864

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 f94f 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fe0a 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f967 	bl	80014e6 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f92f 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000010c 	.word	0x2000010c
 800124c:	20000114 	.word	0x20000114
 8001250:	20000110 	.word	0x20000110

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000114 	.word	0x20000114
 8001278:	20000718 	.word	0x20000718

0800127c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000718 	.word	0x20000718

08001294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000114 	.word	0x20000114

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	@ (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	@ (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	@ (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	@ 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	@ (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	@ (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e014      	b.n	800153a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d105      	bne.n	8001526 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff fc8f 	bl	8000e44 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2202      	movs	r2, #2
 800152a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	795b      	ldrb	r3, [r3, #5]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_DAC_Start_DMA+0x1e>
 800159a:	2302      	movs	r3, #2
 800159c:	e09b      	b.n	80016d6 <HAL_DAC_Start_DMA+0x156>
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2202      	movs	r2, #2
 80015a8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d12f      	bne.n	8001610 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	@ (80016e0 <HAL_DAC_Start_DMA+0x160>)
 80015b6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a49      	ldr	r2, [pc, #292]	@ (80016e4 <HAL_DAC_Start_DMA+0x164>)
 80015be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a48      	ldr	r2, [pc, #288]	@ (80016e8 <HAL_DAC_Start_DMA+0x168>)
 80015c6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80015d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d013      	beq.n	8001606 <HAL_DAC_Start_DMA+0x86>
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d845      	bhi.n	8001670 <HAL_DAC_Start_DMA+0xf0>
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_DAC_Start_DMA+0x72>
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80015f0:	e03e      	b.n	8001670 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3308      	adds	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
        break;
 80015fa:	e03c      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	330c      	adds	r3, #12
 8001602:	617b      	str	r3, [r7, #20]
        break;
 8001604:	e037      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3310      	adds	r3, #16
 800160c:	617b      	str	r3, [r7, #20]
        break;
 800160e:	e032      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a35      	ldr	r2, [pc, #212]	@ (80016ec <HAL_DAC_Start_DMA+0x16c>)
 8001616:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a34      	ldr	r2, [pc, #208]	@ (80016f0 <HAL_DAC_Start_DMA+0x170>)
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	4a33      	ldr	r2, [pc, #204]	@ (80016f4 <HAL_DAC_Start_DMA+0x174>)
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001636:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	2b08      	cmp	r3, #8
 800163c:	d013      	beq.n	8001666 <HAL_DAC_Start_DMA+0xe6>
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d817      	bhi.n	8001674 <HAL_DAC_Start_DMA+0xf4>
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_DAC_Start_DMA+0xd2>
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d005      	beq.n	800165c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001650:	e010      	b.n	8001674 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	3314      	adds	r3, #20
 8001658:	617b      	str	r3, [r7, #20]
        break;
 800165a:	e00c      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3318      	adds	r3, #24
 8001662:	617b      	str	r3, [r7, #20]
        break;
 8001664:	e007      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	331c      	adds	r3, #28
 800166c:	617b      	str	r3, [r7, #20]
        break;
 800166e:	e002      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <HAL_DAC_Start_DMA+0xf6>
        break;
 8001674:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10f      	bne.n	800169c <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800168a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	f000 f968 	bl	800196a <HAL_DMA_Start_IT>
 800169a:	e00e      	b.n	80016ba <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80016aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	68d8      	ldr	r0, [r3, #12]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	f000 f958 	bl	800196a <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	2201      	movs	r2, #1
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	409a      	lsls	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08001805 	.word	0x08001805
 80016e4:	08001827 	.word	0x08001827
 80016e8:	08001843 	.word	0x08001843
 80016ec:	08001871 	.word	0x08001871
 80016f0:	08001893 	.word	0x08001893
 80016f4:	080018af 	.word	0x080018af

080016f8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	795b      	ldrb	r3, [r3, #5]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_DAC_ConfigChannel+0x20>
 8001714:	2302      	movs	r3, #2
 8001716:	e04e      	b.n	80017b6 <HAL_DAC_ConfigChannel+0xbe>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2201      	movs	r2, #1
 800171c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2202      	movs	r2, #2
 8001722:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a24      	ldr	r2, [pc, #144]	@ (80017c4 <HAL_DAC_ConfigChannel+0xcc>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d112      	bne.n	800175c <HAL_DAC_ConfigChannel+0x64>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10f      	bne.n	800175c <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800173c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4013      	ands	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	e00e      	b.n	800177a <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 800175c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4013      	ands	r3, r2
 800176c:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	22c0      	movs	r2, #192	@ 0xc0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2201      	movs	r2, #1
 80017ac:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40007400 	.word	0x40007400

080017c8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f7ff fe95 	bl	8001542 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	711a      	strb	r2, [r3, #4]
}
 800181e:	bf00      	nop
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f7ff fe8e 	bl	8001556 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184e:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	f043 0204 	orr.w	r2, r3, #4
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fe84 	bl	800156a <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	711a      	strb	r2, [r3, #4]
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f7ff ffa2 	bl	80017c8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	711a      	strb	r2, [r3, #4]
}
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f7ff ff9b 	bl	80017dc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f043 0204 	orr.w	r2, r3, #4
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff ff91 	bl	80017f0 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	711a      	strb	r2, [r3, #4]
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e037      	b.n	8001962 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001908:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800190c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f941 	bl	8001bcc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_DMA_Start_IT+0x20>
 8001986:	2302      	movs	r3, #2
 8001988:	e04a      	b.n	8001a20 <HAL_DMA_Start_IT+0xb6>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001998:	2b01      	cmp	r3, #1
 800199a:	d13a      	bne.n	8001a12 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0201 	bic.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	68b9      	ldr	r1, [r7, #8]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 f8d4 	bl	8001b6e <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 020e 	orr.w	r2, r2, #14
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e00f      	b.n	8001a00 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 020a 	orr.w	r2, r2, #10
 80019ee:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e005      	b.n	8001a1e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	2204      	movs	r2, #4
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d024      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x72>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01f      	beq.n	8001a9a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d107      	bne.n	8001a78 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a80:	2104      	movs	r1, #4
 8001a82:	fa01 f202 	lsl.w	r2, r1, r2
 8001a86:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d06a      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a98:	e065      	b.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d02c      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xdc>
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d027      	beq.n	8001b04 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0320 	and.w	r3, r3, #32
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 020a 	bic.w	r2, r2, #10
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae2:	2102      	movs	r1, #2
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d035      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b02:	e030      	b.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	2208      	movs	r2, #8
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d028      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d023      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020e 	bic.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
    }
  }
}
 8001b64:	e7ff      	b.n	8001b66 <HAL_DMA_IRQHandler+0x13e>
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d108      	bne.n	8001bae <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bac:	e007      	b.n	8001bbe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	60da      	str	r2, [r3, #12]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <DMA_CalcBaseAndBitshift+0x34>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <DMA_CalcBaseAndBitshift+0x38>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	009a      	lsls	r2, r3, #2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <DMA_CalcBaseAndBitshift+0x3c>)
 8001bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	bffdfff8 	.word	0xbffdfff8
 8001c04:	cccccccd 	.word	0xcccccccd
 8001c08:	40020000 	.word	0x40020000

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c1a:	e14e      	b.n	8001eba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	2101      	movs	r1, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8140 	beq.w	8001eb4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d005      	beq.n	8001c4c <HAL_GPIO_Init+0x40>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d130      	bne.n	8001cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c82:	2201      	movs	r2, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 0201 	and.w	r2, r3, #1
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d017      	beq.n	8001cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d123      	bne.n	8001d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	220f      	movs	r2, #15
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	691a      	ldr	r2, [r3, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	6939      	ldr	r1, [r7, #16]
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0203 	and.w	r2, r3, #3
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 809a 	beq.w	8001eb4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d80:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a54      	ldr	r2, [pc, #336]	@ (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <HAL_GPIO_Init+0x2cc>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d98:	4a50      	ldr	r2, [pc, #320]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	220f      	movs	r2, #15
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dc2:	d013      	beq.n	8001dec <HAL_GPIO_Init+0x1e0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a46      	ldr	r2, [pc, #280]	@ (8001ee0 <HAL_GPIO_Init+0x2d4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00d      	beq.n	8001de8 <HAL_GPIO_Init+0x1dc>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <HAL_GPIO_Init+0x2d8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <HAL_GPIO_Init+0x1d8>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a44      	ldr	r2, [pc, #272]	@ (8001ee8 <HAL_GPIO_Init+0x2dc>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_GPIO_Init+0x1d4>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de0:	2305      	movs	r3, #5
 8001de2:	e004      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e002      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <HAL_GPIO_Init+0x1e2>
 8001dec:	2300      	movs	r3, #0
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	f002 0203 	and.w	r2, r2, #3
 8001df4:	0092      	lsls	r2, r2, #2
 8001df6:	4093      	lsls	r3, r2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dfe:	4937      	ldr	r1, [pc, #220]	@ (8001edc <HAL_GPIO_Init+0x2d0>)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	089b      	lsrs	r3, r3, #2
 8001e04:	3302      	adds	r3, #2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e0c:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e30:	4a2e      	ldr	r2, [pc, #184]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e36:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e5a:	4a24      	ldr	r2, [pc, #144]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e60:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e84:	4a19      	ldr	r2, [pc, #100]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <HAL_GPIO_Init+0x2e0>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f47f aea9 	bne.w	8001c1c <HAL_GPIO_Init+0x10>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	371c      	adds	r7, #28
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010000 	.word	0x40010000
 8001ee0:	48000400 	.word	0x48000400
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	48000c00 	.word	0x48000c00
 8001eec:	40010400 	.word	0x40010400

08001ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e001      	b.n	8001f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e08d      	b.n	800207e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe ffd4 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d107      	bne.n	8001fca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689a      	ldr	r2, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	e006      	b.n	8001fd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001fd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d108      	bne.n	8001ff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	e007      	b.n	8002002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69d9      	ldr	r1, [r3, #28]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1a      	ldr	r2, [r3, #32]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2220      	movs	r2, #32
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4603      	mov	r3, r0
 8002098:	817b      	strh	r3, [r7, #10]
 800209a:	460b      	mov	r3, r1
 800209c:	813b      	strh	r3, [r7, #8]
 800209e:	4613      	mov	r3, r2
 80020a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	f040 80f9 	bne.w	80022a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <HAL_I2C_Mem_Write+0x34>
 80020b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020c2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0ed      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Mem_Write+0x4e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e0e6      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020de:	f7ff f8cd 	bl	800127c <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2319      	movs	r3, #25
 80020ea:	2201      	movs	r2, #1
 80020ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f955 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d1      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2221      	movs	r2, #33	@ 0x21
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2240      	movs	r2, #64	@ 0x40
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002128:	88f8      	ldrh	r0, [r7, #6]
 800212a:	893a      	ldrh	r2, [r7, #8]
 800212c:	8979      	ldrh	r1, [r7, #10]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	4603      	mov	r3, r0
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f8b9 	bl	80022b0 <I2C_RequestMemoryWrite>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0a9      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2bff      	cmp	r3, #255	@ 0xff
 8002158:	d90e      	bls.n	8002178 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	22ff      	movs	r2, #255	@ 0xff
 800215e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002164:	b2da      	uxtb	r2, r3
 8002166:	8979      	ldrh	r1, [r7, #10]
 8002168:	2300      	movs	r3, #0
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 fad9 	bl	8002728 <I2C_TransferConfig>
 8002176:	e00f      	b.n	8002198 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	b2da      	uxtb	r2, r3
 8002188:	8979      	ldrh	r1, [r7, #10]
 800218a:	2300      	movs	r3, #0
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fac8 	bl	8002728 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f958 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e07b      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d034      	beq.n	8002250 <HAL_I2C_Mem_Write+0x1c8>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d130      	bne.n	8002250 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	2200      	movs	r2, #0
 80021f6:	2180      	movs	r1, #128	@ 0x80
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 f8d1 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e04d      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2bff      	cmp	r3, #255	@ 0xff
 8002210:	d90e      	bls.n	8002230 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	22ff      	movs	r2, #255	@ 0xff
 8002216:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	2300      	movs	r3, #0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fa7d 	bl	8002728 <I2C_TransferConfig>
 800222e:	e00f      	b.n	8002250 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223e:	b2da      	uxtb	r2, r3
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa6c 	bl	8002728 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d19e      	bne.n	8002198 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f93e 	bl	80024e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e01a      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2220      	movs	r2, #32
 8002274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_I2C_Mem_Write+0x224>)
 8002282:	400b      	ands	r3, r1
 8002284:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
  }
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	fe00e800 	.word	0xfe00e800

080022b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	4608      	mov	r0, r1
 80022ba:	4611      	mov	r1, r2
 80022bc:	461a      	mov	r2, r3
 80022be:	4603      	mov	r3, r0
 80022c0:	817b      	strh	r3, [r7, #10]
 80022c2:	460b      	mov	r3, r1
 80022c4:	813b      	strh	r3, [r7, #8]
 80022c6:	4613      	mov	r3, r2
 80022c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022ca:	88fb      	ldrh	r3, [r7, #6]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	4b20      	ldr	r3, [pc, #128]	@ (8002354 <I2C_RequestMemoryWrite+0xa4>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fa25 	bl	8002728 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f8b5 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e02c      	b.n	800234c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f8:	893b      	ldrh	r3, [r7, #8]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	629a      	str	r2, [r3, #40]	@ 0x28
 8002302:	e015      	b.n	8002330 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002304:	893b      	ldrh	r3, [r7, #8]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	b2da      	uxtb	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	69b9      	ldr	r1, [r7, #24]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 f89b 	bl	8002452 <I2C_WaitOnTXISFlagUntilTimeout>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e012      	b.n	800234c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	2200      	movs	r2, #0
 8002338:	2180      	movs	r1, #128	@ 0x80
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 f830 	bl	80023a0 <I2C_WaitOnFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	80002000 	.word	0x80002000

08002358 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2200      	movs	r2, #0
 8002374:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b01      	cmp	r3, #1
 8002382:	d007      	beq.n	8002394 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699a      	ldr	r2, [r3, #24]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	619a      	str	r2, [r3, #24]
  }
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023b0:	e03b      	b.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	6839      	ldr	r1, [r7, #0]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f8d6 	bl	8002568 <I2C_IsErrorOccurred>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e041      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d02d      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ce:	f7fe ff55 	bl	800127c <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d302      	bcc.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d122      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699a      	ldr	r2, [r3, #24]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d113      	bne.n	800242a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002406:	f043 0220 	orr.w	r2, r3, #32
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d0b4      	beq.n	80023b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800245e:	e033      	b.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f87f 	bl	8002568 <I2C_IsErrorOccurred>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e031      	b.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d025      	beq.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7fe fefe 	bl	800127c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d11a      	bne.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b02      	cmp	r3, #2
 800249e:	d013      	beq.n	80024c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e007      	b.n	80024d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d1c4      	bne.n	8002460 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ec:	e02f      	b.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68b9      	ldr	r1, [r7, #8]
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f838 	bl	8002568 <I2C_IsErrorOccurred>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e02d      	b.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7fe febb 	bl	800127c <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11a      	bne.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b20      	cmp	r3, #32
 8002524:	d013      	beq.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e007      	b.n	800255e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b20      	cmp	r3, #32
 800255a:	d1c8      	bne.n	80024ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0310 	and.w	r3, r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	d068      	beq.n	8002666 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2210      	movs	r2, #16
 800259a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800259c:	e049      	b.n	8002632 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d045      	beq.n	8002632 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7fe fe69 	bl	800127c <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_IsErrorOccurred+0x54>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d13a      	bne.n	8002632 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025de:	d121      	bne.n	8002624 <I2C_IsErrorOccurred+0xbc>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025e6:	d01d      	beq.n	8002624 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025e8:	7cfb      	ldrb	r3, [r7, #19]
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d01a      	beq.n	8002624 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025fe:	f7fe fe3d 	bl	800127c <HAL_GetTick>
 8002602:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002604:	e00e      	b.n	8002624 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002606:	f7fe fe39 	bl	800127c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b19      	cmp	r3, #25
 8002612:	d907      	bls.n	8002624 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002622:	e006      	b.n	8002632 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b20      	cmp	r3, #32
 8002630:	d1e9      	bne.n	8002606 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d003      	beq.n	8002648 <I2C_IsErrorOccurred+0xe0>
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0aa      	beq.n	800259e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2220      	movs	r2, #32
 8002656:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002688:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00b      	beq.n	80026d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01c      	beq.n	8002716 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f7ff fe3b 	bl	8002358 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <I2C_IsErrorOccurred+0x1bc>)
 80026ee:	400b      	ands	r3, r1
 80026f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800271a:	4618      	mov	r0, r3
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	fe00e800 	.word	0xfe00e800

08002728 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	4613      	mov	r3, r2
 8002738:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002740:	7a7b      	ldrb	r3, [r7, #9]
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002748:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	4313      	orrs	r3, r2
 8002752:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002756:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	0d5b      	lsrs	r3, r3, #21
 8002762:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <I2C_TransferConfig+0x60>)
 8002768:	430b      	orrs	r3, r1
 800276a:	43db      	mvns	r3, r3
 800276c:	ea02 0103 	and.w	r1, r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	03ff63ff 	.word	0x03ff63ff

0800278c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d138      	bne.n	8002814 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e032      	b.n	8002816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	@ 0x24
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2220      	movs	r2, #32
 8002804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b20      	cmp	r3, #32
 8002836:	d139      	bne.n	80028ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002842:	2302      	movs	r3, #2
 8002844:	e033      	b.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2224      	movs	r2, #36	@ 0x24
 8002852:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002874:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4313      	orrs	r3, r2
 800287e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f001 b823 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 817d 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028f8:	4bbc      	ldr	r3, [pc, #752]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002904:	4bb9      	ldr	r3, [pc, #740]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d15c      	bne.n	80029ca <HAL_RCC_OscConfig+0x10e>
 8002910:	4bb6      	ldr	r3, [pc, #728]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800291c:	d155      	bne.n	80029ca <HAL_RCC_OscConfig+0x10e>
 800291e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002922:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002932:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	b2db      	uxtb	r3, r3
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d102      	bne.n	8002950 <HAL_RCC_OscConfig+0x94>
 800294a:	4ba8      	ldr	r3, [pc, #672]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e015      	b.n	800297c <HAL_RCC_OscConfig+0xc0>
 8002950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002954:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002964:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002968:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800296c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002970:	fa93 f3a3 	rbit	r3, r3
 8002974:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002978:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002980:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002984:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002988:	fa92 f2a2 	rbit	r2, r2
 800298c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002990:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002994:	fab2 f282 	clz	r2, r2
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f042 0220 	orr.w	r2, r2, #32
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f002 021f 	and.w	r2, r2, #31
 80029a4:	2101      	movs	r1, #1
 80029a6:	fa01 f202 	lsl.w	r2, r1, r2
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 811f 	beq.w	8002bf0 <HAL_RCC_OscConfig+0x334>
 80029b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8116 	bne.w	8002bf0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f000 bfaf 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029da:	d106      	bne.n	80029ea <HAL_RCC_OscConfig+0x12e>
 80029dc:	4b83      	ldr	r3, [pc, #524]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a82      	ldr	r2, [pc, #520]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e036      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x158>
 80029fa:	4b7c      	ldr	r3, [pc, #496]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7b      	ldr	r2, [pc, #492]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b79      	ldr	r3, [pc, #484]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a78      	ldr	r2, [pc, #480]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e021      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 8002a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x184>
 8002a26:	4b71      	ldr	r3, [pc, #452]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a70      	ldr	r2, [pc, #448]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a6d      	ldr	r2, [pc, #436]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0x19c>
 8002a40:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a69      	ldr	r2, [pc, #420]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b67      	ldr	r3, [pc, #412]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a66      	ldr	r2, [pc, #408]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a56:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a58:	4b64      	ldr	r3, [pc, #400]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5c:	f023 020f 	bic.w	r2, r3, #15
 8002a60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	495f      	ldr	r1, [pc, #380]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d059      	beq.n	8002b36 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe fbfb 	bl	800127c <HAL_GetTick>
 8002a86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fbf6 	bl	800127c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	@ 0x64
 8002a9a:	d902      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	f000 bf43 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 8002aa2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aa6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002ab6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x218>
 8002ace:	4b47      	ldr	r3, [pc, #284]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e015      	b.n	8002b00 <HAL_RCC_OscConfig+0x244>
 8002ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ad8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ae8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002aec:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002af0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002afc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b04:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002b08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002b0c:	fa92 f2a2 	rbit	r2, r2
 8002b10:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002b14:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002b18:	fab2 f282 	clz	r2, r2
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	f042 0220 	orr.w	r2, r2, #32
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	f002 021f 	and.w	r2, r2, #31
 8002b28:	2101      	movs	r1, #1
 8002b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ab      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1d0>
 8002b34:	e05d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fba1 	bl	800127c <HAL_GetTick>
 8002b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f7fe fb9c 	bl	800127c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b64      	cmp	r3, #100	@ 0x64
 8002b4e:	d902      	bls.n	8002b56 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	f000 bee9 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 8002b56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b5a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002b6a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d102      	bne.n	8002b88 <HAL_RCC_OscConfig+0x2cc>
 8002b82:	4b1a      	ldr	r3, [pc, #104]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	e015      	b.n	8002bb4 <HAL_RCC_OscConfig+0x2f8>
 8002b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002b9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ba0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002ba4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bec <HAL_RCC_OscConfig+0x330>)
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002bbc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002bc0:	fa92 f2a2 	rbit	r2, r2
 8002bc4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002bc8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002bcc:	fab2 f282 	clz	r2, r2
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	f042 0220 	orr.w	r2, r2, #32
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	f002 021f 	and.w	r2, r2, #31
 8002bdc:	2101      	movs	r1, #1
 8002bde:	fa01 f202 	lsl.w	r2, r1, r2
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1ab      	bne.n	8002b40 <HAL_RCC_OscConfig+0x284>
 8002be8:	e003      	b.n	8002bf2 <HAL_RCC_OscConfig+0x336>
 8002bea:	bf00      	nop
 8002bec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 817d 	beq.w	8002f02 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c08:	4ba6      	ldr	r3, [pc, #664]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c14:	4ba3      	ldr	r3, [pc, #652]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d172      	bne.n	8002d06 <HAL_RCC_OscConfig+0x44a>
 8002c20:	4ba0      	ldr	r3, [pc, #640]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d16c      	bne.n	8002d06 <HAL_RCC_OscConfig+0x44a>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002c3e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d102      	bne.n	8002c5c <HAL_RCC_OscConfig+0x3a0>
 8002c56:	4b93      	ldr	r3, [pc, #588]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	e013      	b.n	8002c84 <HAL_RCC_OscConfig+0x3c8>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002c6e:	2302      	movs	r3, #2
 8002c70:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002c74:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002c80:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2202      	movs	r2, #2
 8002c86:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002c8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002c8e:	fa92 f2a2 	rbit	r2, r2
 8002c92:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002c96:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002c9a:	fab2 f282 	clz	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	f002 021f 	and.w	r2, r2, #31
 8002caa:	2101      	movs	r1, #1
 8002cac:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_RCC_OscConfig+0x410>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	f000 be2e 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b75      	ldr	r3, [pc, #468]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	21f8      	movs	r1, #248	@ 0xf8
 8002ce2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002cea:	fa91 f1a1 	rbit	r1, r1
 8002cee:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002cf2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002cf6:	fab1 f181 	clz	r1, r1
 8002cfa:	b2c9      	uxtb	r1, r1
 8002cfc:	408b      	lsls	r3, r1
 8002cfe:	4969      	ldr	r1, [pc, #420]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d04:	e0fd      	b.n	8002f02 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 8088 	beq.w	8002e28 <HAL_RCC_OscConfig+0x56c>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002d2a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d38:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2301      	movs	r3, #1
 8002d42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fa9a 	bl	800127c <HAL_GetTick>
 8002d48:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fe fa95 	bl	800127c <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	f000 bde2 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002d76:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d102      	bne.n	8002d94 <HAL_RCC_OscConfig+0x4d8>
 8002d8e:	4b45      	ldr	r3, [pc, #276]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e013      	b.n	8002dbc <HAL_RCC_OscConfig+0x500>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002da6:	2302      	movs	r3, #2
 8002da8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002dac:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002db8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002dc2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002dce:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f002 021f 	and.w	r2, r2, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0af      	beq.n	8002d4e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002df6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	21f8      	movs	r1, #248	@ 0xf8
 8002e04:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e08:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002e0c:	fa91 f1a1 	rbit	r1, r1
 8002e10:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002e14:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002e18:	fab1 f181 	clz	r1, r1
 8002e1c:	b2c9      	uxtb	r1, r1
 8002e1e:	408b      	lsls	r3, r1
 8002e20:	4920      	ldr	r1, [pc, #128]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
 8002e26:	e06c      	b.n	8002f02 <HAL_RCC_OscConfig+0x646>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e32:	fa93 f3a3 	rbit	r3, r3
 8002e36:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	fab3 f383 	clz	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002e48:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2300      	movs	r3, #0
 8002e52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e54:	f7fe fa12 	bl	800127c <HAL_GetTick>
 8002e58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5e:	f7fe fa0d 	bl	800127c <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d902      	bls.n	8002e74 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f000 bd5a 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e8a:	fab3 f383 	clz	r3, r3
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d104      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x5ec>
 8002e9e:	4b01      	ldr	r3, [pc, #4]	@ (8002ea4 <HAL_RCC_OscConfig+0x5e8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	e015      	b.n	8002ed0 <HAL_RCC_OscConfig+0x614>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002eba:	2302      	movs	r3, #2
 8002ebc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002ecc:	4bc8      	ldr	r3, [pc, #800]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002ed6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002eda:	fa92 f2a2 	rbit	r2, r2
 8002ede:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002ee2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ee6:	fab2 f282 	clz	r2, r2
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f042 0220 	orr.w	r2, r2, #32
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	f002 021f 	and.w	r2, r2, #31
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ad      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8110 	beq.w	8003138 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d079      	beq.n	800301c <HAL_RCC_OscConfig+0x760>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	4bab      	ldr	r3, [pc, #684]	@ (80031f4 <HAL_RCC_OscConfig+0x938>)
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2301      	movs	r3, #1
 8002f50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe f993 	bl	800127c <HAL_GetTick>
 8002f56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e00a      	b.n	8002f72 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f98e 	bl	800127c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d902      	bls.n	8002f72 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f000 bcdb 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 8002f72:	2302      	movs	r3, #2
 8002f74:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f88:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	fa93 f2a3 	rbit	r2, r3
 8002fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002fca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fcc:	4b88      	ldr	r3, [pc, #544]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 8002fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fd8:	2102      	movs	r1, #2
 8002fda:	6019      	str	r1, [r3, #0]
 8002fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	fa93 f1a3 	rbit	r1, r3
 8002fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ff2:	6019      	str	r1, [r3, #0]
  return result;
 8002ff4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0a0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x6a0>
 800301a:	e08d      	b.n	8003138 <HAL_RCC_OscConfig+0x87c>
 800301c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003020:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	fa93 f2a3 	rbit	r2, r3
 8003036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800303e:	601a      	str	r2, [r3, #0]
  return result;
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003048:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	4b68      	ldr	r3, [pc, #416]	@ (80031f4 <HAL_RCC_OscConfig+0x938>)
 8003054:	4413      	add	r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	461a      	mov	r2, r3
 800305a:	2300      	movs	r3, #0
 800305c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fe f90d 	bl	800127c <HAL_GetTick>
 8003062:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003068:	f7fe f908 	bl	800127c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d902      	bls.n	800307e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	f000 bc55 	b.w	8003928 <HAL_RCC_OscConfig+0x106c>
 800307e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003082:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003086:	2202      	movs	r2, #2
 8003088:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030aa:	2202      	movs	r2, #2
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	fa93 f2a3 	rbit	r2, r3
 80030bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030ce:	2202      	movs	r2, #2
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	fa93 f2a3 	rbit	r2, r3
 80030e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80030e8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ea:	4b41      	ldr	r3, [pc, #260]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 80030ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80030f6:	2102      	movs	r1, #2
 80030f8:	6019      	str	r1, [r3, #0]
 80030fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	fa93 f1a3 	rbit	r1, r3
 8003108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003110:	6019      	str	r1, [r3, #0]
  return result;
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003126:	b2db      	uxtb	r3, r3
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d197      	bne.n	8003068 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 81a1 	beq.w	8003490 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003154:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d116      	bne.n	800318e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	4a22      	ldr	r2, [pc, #136]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800316a:	61d3      	str	r3, [r2, #28]
 800316c:	4b20      	ldr	r3, [pc, #128]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003186:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b1a      	ldr	r3, [pc, #104]	@ (80031f8 <HAL_RCC_OscConfig+0x93c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11a      	bne.n	80031d0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b17      	ldr	r3, [pc, #92]	@ (80031f8 <HAL_RCC_OscConfig+0x93c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <HAL_RCC_OscConfig+0x93c>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fe f869 	bl	800127c <HAL_GetTick>
 80031aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	e009      	b.n	80031c4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b0:	f7fe f864 	bl	800127c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	@ 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e3b1      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c4:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <HAL_RCC_OscConfig+0x93c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0ef      	beq.n	80031b0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d10d      	bne.n	80031fc <HAL_RCC_OscConfig+0x940>
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a02      	ldr	r2, [pc, #8]	@ (80031f0 <HAL_RCC_OscConfig+0x934>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	e03c      	b.n	8003268 <HAL_RCC_OscConfig+0x9ac>
 80031ee:	bf00      	nop
 80031f0:	40021000 	.word	0x40021000
 80031f4:	10908120 	.word	0x10908120
 80031f8:	40007000 	.word	0x40007000
 80031fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x96a>
 800320c:	4bc1      	ldr	r3, [pc, #772]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4ac0      	ldr	r2, [pc, #768]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003212:	f023 0301 	bic.w	r3, r3, #1
 8003216:	6213      	str	r3, [r2, #32]
 8003218:	4bbe      	ldr	r3, [pc, #760]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4abd      	ldr	r2, [pc, #756]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800321e:	f023 0304 	bic.w	r3, r3, #4
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e020      	b.n	8003268 <HAL_RCC_OscConfig+0x9ac>
 8003226:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800322a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b05      	cmp	r3, #5
 8003234:	d10c      	bne.n	8003250 <HAL_RCC_OscConfig+0x994>
 8003236:	4bb7      	ldr	r3, [pc, #732]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4ab6      	ldr	r2, [pc, #728]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800323c:	f043 0304 	orr.w	r3, r3, #4
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	4bb4      	ldr	r3, [pc, #720]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4ab3      	ldr	r2, [pc, #716]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	6213      	str	r3, [r2, #32]
 800324e:	e00b      	b.n	8003268 <HAL_RCC_OscConfig+0x9ac>
 8003250:	4bb0      	ldr	r3, [pc, #704]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4aaf      	ldr	r2, [pc, #700]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003256:	f023 0301 	bic.w	r3, r3, #1
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	4bad      	ldr	r3, [pc, #692]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4aac      	ldr	r2, [pc, #688]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003262:	f023 0304 	bic.w	r3, r3, #4
 8003266:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8081 	beq.w	800337c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327a:	f7fd ffff 	bl	800127c <HAL_GetTick>
 800327e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e00b      	b.n	800329c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fd fffa 	bl	800127c <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e345      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032a4:	2202      	movs	r2, #2
 80032a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	fa93 f2a3 	rbit	r2, r3
 80032b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ba:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032c8:	2202      	movs	r2, #2
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032de:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032e2:	601a      	str	r2, [r3, #0]
  return result;
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80032ec:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d102      	bne.n	8003308 <HAL_RCC_OscConfig+0xa4c>
 8003302:	4b84      	ldr	r3, [pc, #528]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	e013      	b.n	8003330 <HAL_RCC_OscConfig+0xa74>
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003310:	2202      	movs	r2, #2
 8003312:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003326:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	4b79      	ldr	r3, [pc, #484]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003334:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003338:	2102      	movs	r1, #2
 800333a:	6011      	str	r1, [r2, #0]
 800333c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003340:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	fa92 f1a2 	rbit	r1, r2
 800334a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800334e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003352:	6011      	str	r1, [r2, #0]
  return result;
 8003354:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003358:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	f002 021f 	and.w	r2, r2, #31
 800336e:	2101      	movs	r1, #1
 8003370:	fa01 f202 	lsl.w	r2, r1, r2
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d084      	beq.n	8003284 <HAL_RCC_OscConfig+0x9c8>
 800337a:	e07f      	b.n	800347c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337c:	f7fd ff7e 	bl	800127c <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	e00b      	b.n	800339e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fd ff79 	bl	800127c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e2c4      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	fa93 f2a3 	rbit	r2, r3
 80033b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033bc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033ca:	2202      	movs	r2, #2
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033e4:	601a      	str	r2, [r3, #0]
  return result;
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80033ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0302 	orr.w	r3, r3, #2
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d102      	bne.n	800340a <HAL_RCC_OscConfig+0xb4e>
 8003404:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	e013      	b.n	8003432 <HAL_RCC_OscConfig+0xb76>
 800340a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003412:	2202      	movs	r2, #2
 8003414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	fa93 f2a3 	rbit	r2, r3
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003436:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800343a:	2102      	movs	r1, #2
 800343c:	6011      	str	r1, [r2, #0]
 800343e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003442:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fa92 f1a2 	rbit	r1, r2
 800344c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003450:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003454:	6011      	str	r1, [r2, #0]
  return result;
 8003456:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800345a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	fab2 f282 	clz	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f002 021f 	and.w	r2, r2, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f202 	lsl.w	r2, r1, r2
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d184      	bne.n	8003386 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800347c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003480:	2b01      	cmp	r3, #1
 8003482:	d105      	bne.n	8003490 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003484:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	4a22      	ldr	r2, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003494:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 8242 	beq.w	8003926 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <HAL_RCC_OscConfig+0xc58>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	f000 8213 	beq.w	80038d6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	f040 8162 	bne.w	8003786 <HAL_RCC_OscConfig+0xeca>
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034e6:	601a      	str	r2, [r3, #0]
  return result;
 80034e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ec:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80034f0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80034fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	461a      	mov	r2, r3
 8003504:	2300      	movs	r3, #0
 8003506:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fd feb8 	bl	800127c <HAL_GetTick>
 800350c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003510:	e00c      	b.n	800352c <HAL_RCC_OscConfig+0xc70>
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003518:	f7fd feb0 	bl	800127c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e1fd      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
 800352c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003530:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003534:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003538:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f2a3 	rbit	r2, r3
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003550:	601a      	str	r2, [r3, #0]
  return result;
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800355a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	095b      	lsrs	r3, r3, #5
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b01      	cmp	r3, #1
 800356e:	d102      	bne.n	8003576 <HAL_RCC_OscConfig+0xcba>
 8003570:	4bb0      	ldr	r3, [pc, #704]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	e027      	b.n	80035c6 <HAL_RCC_OscConfig+0xd0a>
 8003576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800357e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f2a3 	rbit	r2, r3
 80035b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035bc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80035c0:	601a      	str	r2, [r3, #0]
 80035c2:	4b9c      	ldr	r3, [pc, #624]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ca:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035ce:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80035d2:	6011      	str	r1, [r2, #0]
 80035d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	fa92 f1a2 	rbit	r1, r2
 80035e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035e6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035ea:	6011      	str	r1, [r2, #0]
  return result;
 80035ec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035f0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	fab2 f282 	clz	r2, r2
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	f042 0220 	orr.w	r2, r2, #32
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f002 021f 	and.w	r2, r2, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d182      	bne.n	8003518 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003612:	4b88      	ldr	r3, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	430b      	orrs	r3, r1
 8003634:	497f      	ldr	r1, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 8003636:	4313      	orrs	r3, r2
 8003638:	604b      	str	r3, [r1, #4]
 800363a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003642:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003646:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	fa93 f2a3 	rbit	r2, r3
 8003656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800365e:	601a      	str	r2, [r3, #0]
  return result;
 8003660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003664:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003668:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366a:	fab3 f383 	clz	r3, r3
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003674:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	461a      	mov	r2, r3
 800367c:	2301      	movs	r3, #1
 800367e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd fdfc 	bl	800127c <HAL_GetTick>
 8003684:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003688:	e009      	b.n	800369e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368a:	f7fd fdf7 	bl	800127c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e144      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
 800369e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	fa93 f2a3 	rbit	r2, r3
 80036ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036be:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036c2:	601a      	str	r2, [r3, #0]
  return result;
 80036c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80036cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d102      	bne.n	80036e8 <HAL_RCC_OscConfig+0xe2c>
 80036e2:	4b54      	ldr	r3, [pc, #336]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	e027      	b.n	8003738 <HAL_RCC_OscConfig+0xe7c>
 80036e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80036f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f2a3 	rbit	r2, r3
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003712:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003716:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003720:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	fa93 f2a3 	rbit	r2, r3
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	4b3f      	ldr	r3, [pc, #252]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800373c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003740:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003744:	6011      	str	r1, [r2, #0]
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	fa92 f1a2 	rbit	r1, r2
 8003754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003758:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800375c:	6011      	str	r1, [r2, #0]
  return result;
 800375e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003762:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f042 0220 	orr.w	r2, r2, #32
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f002 021f 	and.w	r2, r2, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d082      	beq.n	800368a <HAL_RCC_OscConfig+0xdce>
 8003784:	e0cf      	b.n	8003926 <HAL_RCC_OscConfig+0x106a>
 8003786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800378e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003798:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	fa93 f2a3 	rbit	r2, r3
 80037a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037aa:	601a      	str	r2, [r3, #0]
  return result;
 80037ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80037b4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80037c0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	461a      	mov	r2, r3
 80037c8:	2300      	movs	r3, #0
 80037ca:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fd fd56 	bl	800127c <HAL_GetTick>
 80037d0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d4:	e009      	b.n	80037ea <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fd fd51 	bl	800127c <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e09e      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80037f2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	fa93 f2a3 	rbit	r2, r3
 8003806:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800380e:	601a      	str	r2, [r3, #0]
  return result;
 8003810:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003814:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003818:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800381a:	fab3 f383 	clz	r3, r3
 800381e:	b2db      	uxtb	r3, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d104      	bne.n	8003838 <HAL_RCC_OscConfig+0xf7c>
 800382e:	4b01      	ldr	r3, [pc, #4]	@ (8003834 <HAL_RCC_OscConfig+0xf78>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	e029      	b.n	8003888 <HAL_RCC_OscConfig+0xfcc>
 8003834:	40021000 	.word	0x40021000
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003840:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	fa93 f2a3 	rbit	r2, r3
 8003854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003858:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003862:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003866:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	4b2b      	ldr	r3, [pc, #172]	@ (8003934 <HAL_RCC_OscConfig+0x1078>)
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800388c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003890:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003894:	6011      	str	r1, [r2, #0]
 8003896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	fa92 f1a2 	rbit	r1, r2
 80038a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038ac:	6011      	str	r1, [r2, #0]
  return result;
 80038ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038b2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	fab2 f282 	clz	r2, r2
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f042 0220 	orr.w	r2, r2, #32
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	f002 021f 	and.w	r2, r2, #31
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f202 	lsl.w	r2, r1, r2
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d180      	bne.n	80037d6 <HAL_RCC_OscConfig+0xf1a>
 80038d4:	e027      	b.n	8003926 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e01e      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038ea:	4b12      	ldr	r3, [pc, #72]	@ (8003934 <HAL_RCC_OscConfig+0x1078>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038f2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80038f6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	429a      	cmp	r2, r3
 8003908:	d10b      	bne.n	8003922 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800390a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800390e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800391e:	429a      	cmp	r2, r3
 8003920:	d001      	beq.n	8003926 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b09e      	sub	sp, #120	@ 0x78
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e162      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b90      	ldr	r3, [pc, #576]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b8d      	ldr	r3, [pc, #564]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	498b      	ldr	r1, [pc, #556]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b89      	ldr	r3, [pc, #548]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e14a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d008      	beq.n	800399e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b82      	ldr	r3, [pc, #520]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	497f      	ldr	r1, [pc, #508]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 800399a:	4313      	orrs	r3, r2
 800399c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80dc 	beq.w	8003b64 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d13c      	bne.n	8003a2e <HAL_RCC_ClockConfig+0xf6>
 80039b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039b8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039bc:	fa93 f3a3 	rbit	r3, r3
 80039c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80039c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d102      	bne.n	80039de <HAL_RCC_ClockConfig+0xa6>
 80039d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e00f      	b.n	80039fe <HAL_RCC_ClockConfig+0xc6>
 80039de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039e2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80039ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80039f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039fa:	4b67      	ldr	r3, [pc, #412]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a06:	fa92 f2a2 	rbit	r2, r2
 8003a0a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003a0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a0e:	fab2 f282 	clz	r2, r2
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f042 0220 	orr.w	r2, r2, #32
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	f002 021f 	and.w	r2, r2, #31
 8003a1e:	2101      	movs	r1, #1
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d17b      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0f3      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d13c      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x178>
 8003a36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a3a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a3e:	fa93 f3a3 	rbit	r3, r3
 8003a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d102      	bne.n	8003a60 <HAL_RCC_ClockConfig+0x128>
 8003a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	e00f      	b.n	8003a80 <HAL_RCC_ClockConfig+0x148>
 8003a60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a64:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a68:	fa93 f3a3 	rbit	r3, r3
 8003a6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a7c:	4b46      	ldr	r3, [pc, #280]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a84:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003a86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a88:	fa92 f2a2 	rbit	r2, r2
 8003a8c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a90:	fab2 f282 	clz	r2, r2
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	f042 0220 	orr.w	r2, r2, #32
 8003a9a:	b2d2      	uxtb	r2, r2
 8003a9c:	f002 021f 	and.w	r2, r2, #31
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d13a      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0b2      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x1a0>
 8003ad2:	4b31      	ldr	r3, [pc, #196]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	e00d      	b.n	8003af4 <HAL_RCC_ClockConfig+0x1bc>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	fa93 f3a3 	rbit	r3, r3
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	fa93 f3a3 	rbit	r3, r3
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	4b29      	ldr	r3, [pc, #164]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	2202      	movs	r2, #2
 8003af6:	61ba      	str	r2, [r7, #24]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	fa92 f2a2 	rbit	r2, r2
 8003afe:	617a      	str	r2, [r7, #20]
  return result;
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	fab2 f282 	clz	r2, r2
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f042 0220 	orr.w	r2, r2, #32
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f002 021f 	and.w	r2, r2, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e079      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b22:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f023 0203 	bic.w	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	491a      	ldr	r1, [pc, #104]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b34:	f7fd fba2 	bl	800127c <HAL_GetTick>
 8003b38:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b3c:	f7fd fb9e 	bl	800127c <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e061      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b52:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 020c 	and.w	r2, r3, #12
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d1eb      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d214      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b72:	4b08      	ldr	r3, [pc, #32]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f023 0207 	bic.w	r2, r3, #7
 8003b7a:	4906      	ldr	r1, [pc, #24]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b04      	ldr	r3, [pc, #16]	@ (8003b94 <HAL_RCC_ClockConfig+0x25c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d005      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e040      	b.n	8003c16 <HAL_RCC_ClockConfig+0x2de>
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_RCC_ClockConfig+0x2e8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	491a      	ldr	r1, [pc, #104]	@ (8003c20 <HAL_RCC_ClockConfig+0x2e8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b16      	ldr	r3, [pc, #88]	@ (8003c20 <HAL_RCC_ClockConfig+0x2e8>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4912      	ldr	r1, [pc, #72]	@ (8003c20 <HAL_RCC_ClockConfig+0x2e8>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bda:	f000 f829 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8003bde:	4601      	mov	r1, r0
 8003be0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c20 <HAL_RCC_ClockConfig+0x2e8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be8:	22f0      	movs	r2, #240	@ 0xf0
 8003bea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	fa92 f2a2 	rbit	r2, r2
 8003bf2:	60fa      	str	r2, [r7, #12]
  return result;
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	fab2 f282 	clz	r2, r2
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	40d3      	lsrs	r3, r2
 8003bfe:	4a09      	ldr	r2, [pc, #36]	@ (8003c24 <HAL_RCC_ClockConfig+0x2ec>)
 8003c00:	5cd3      	ldrb	r3, [r2, r3]
 8003c02:	fa21 f303 	lsr.w	r3, r1, r3
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <HAL_RCC_ClockConfig+0x2f0>)
 8003c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_RCC_ClockConfig+0x2f4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd faf0 	bl	80011f4 <HAL_InitTick>
  
  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3778      	adds	r7, #120	@ 0x78
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08005e90 	.word	0x08005e90
 8003c28:	2000010c 	.word	0x2000010c
 8003c2c:	20000110 	.word	0x20000110

08003c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x30>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x36>
 8003c5e:	e026      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c60:	4b19      	ldr	r3, [pc, #100]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c62:	613b      	str	r3, [r7, #16]
      break;
 8003c64:	e026      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003c74:	4b13      	ldr	r3, [pc, #76]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d008      	beq.n	8003c9e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c8c:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ca2:	fb02 f303 	mul.w	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	613b      	str	r3, [r7, #16]
      break;
 8003cac:	e002      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003cae:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cb0:	613b      	str	r3, [r7, #16]
      break;
 8003cb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cb4:	693b      	ldr	r3, [r7, #16]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	007a1200 	.word	0x007a1200
 8003ccc:	08005ea8 	.word	0x08005ea8
 8003cd0:	08005eb8 	.word	0x08005eb8
 8003cd4:	003d0900 	.word	0x003d0900

08003cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cdc:	4b03      	ldr	r3, [pc, #12]	@ (8003cec <HAL_RCC_GetHCLKFreq+0x14>)
 8003cde:	681b      	ldr	r3, [r3, #0]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	2000010c 	.word	0x2000010c

08003cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cf6:	f7ff ffef 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003cfa:	4601      	mov	r1, r0
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d04:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003d08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	603a      	str	r2, [r7, #0]
  return result;
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	40d3      	lsrs	r3, r2
 8003d1c:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003d1e:	5cd3      	ldrb	r3, [r2, r3]
 8003d20:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003d24:	4618      	mov	r0, r3
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	08005ea0 	.word	0x08005ea0

08003d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d3a:	f7ff ffcd 	bl	8003cd8 <HAL_RCC_GetHCLKFreq>
 8003d3e:	4601      	mov	r1, r0
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003d48:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003d4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	fa92 f2a2 	rbit	r2, r2
 8003d54:	603a      	str	r2, [r7, #0]
  return result;
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	fab2 f282 	clz	r2, r2
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	40d3      	lsrs	r3, r2
 8003d60:	4a04      	ldr	r2, [pc, #16]	@ (8003d74 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	08005ea0 	.word	0x08005ea0

08003d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b092      	sub	sp, #72	@ 0x48
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80cd 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9c:	4b86      	ldr	r3, [pc, #536]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10e      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b83      	ldr	r3, [pc, #524]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4a82      	ldr	r2, [pc, #520]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	61d3      	str	r3, [r2, #28]
 8003db4:	4b80      	ldr	r3, [pc, #512]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d118      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a79      	ldr	r2, [pc, #484]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ddc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7fd fa4d 	bl	800127c <HAL_GetTick>
 8003de2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	e008      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de6:	f7fd fa49 	bl	800127c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	@ 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0db      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df8:	4b70      	ldr	r3, [pc, #448]	@ (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e04:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d07d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d076      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e22:	4b65      	ldr	r3, [pc, #404]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e30:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	fa93 f3a3 	rbit	r3, r3
 8003e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e60:	fab3 f383 	clz	r3, r3
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b55      	ldr	r3, [pc, #340]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2300      	movs	r3, #0
 8003e72:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e74:	4a50      	ldr	r2, [pc, #320]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e78:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d045      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd f9fa 	bl	800127c <HAL_GetTick>
 8003e88:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd f9f6 	bl	800127c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e086      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eae:	2302      	movs	r3, #2
 8003eb0:	623b      	str	r3, [r7, #32]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	fa93 f3a3 	rbit	r3, r3
 8003eb8:	61fb      	str	r3, [r7, #28]
  return result;
 8003eba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d102      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ed0:	4b39      	ldr	r3, [pc, #228]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	e007      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	fa93 f3a3 	rbit	r3, r3
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	4b35      	ldr	r3, [pc, #212]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	613a      	str	r2, [r7, #16]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	fa92 f2a2 	rbit	r2, r2
 8003ef0:	60fa      	str	r2, [r7, #12]
  return result;
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	fab2 f282 	clz	r2, r2
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003efe:	b2d2      	uxtb	r2, r2
 8003f00:	f002 021f 	and.w	r2, r2, #31
 8003f04:	2101      	movs	r1, #1
 8003f06:	fa01 f202 	lsl.w	r2, r1, r2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0bd      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f10:	4b29      	ldr	r3, [pc, #164]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	4926      	ldr	r1, [pc, #152]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2a:	4b23      	ldr	r3, [pc, #140]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f34:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d008      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f42:	4b1d      	ldr	r3, [pc, #116]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	f023 0203 	bic.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	491a      	ldr	r1, [pc, #104]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f60:	4b15      	ldr	r3, [pc, #84]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	f023 0210 	bic.w	r2, r3, #16
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4912      	ldr	r1, [pc, #72]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	490b      	ldr	r1, [pc, #44]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f9c:	4b06      	ldr	r3, [pc, #24]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4903      	ldr	r1, [pc, #12]	@ (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3748      	adds	r7, #72	@ 0x48
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	10908100 	.word	0x10908100

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e049      	b.n	800406a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7fc ffde 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f000 f9a2 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d001      	beq.n	800408c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e038      	b.n	80040fe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <HAL_TIM_Base_Start+0x98>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00e      	beq.n	80040bc <HAL_TIM_Base_Start+0x48>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a6:	d009      	beq.n	80040bc <HAL_TIM_Base_Start+0x48>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <HAL_TIM_Base_Start+0x9c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d004      	beq.n	80040bc <HAL_TIM_Base_Start+0x48>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <HAL_TIM_Base_Start+0xa0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d115      	bne.n	80040e8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	4b15      	ldr	r3, [pc, #84]	@ (8004118 <HAL_TIM_Base_Start+0xa4>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b06      	cmp	r3, #6
 80040cc:	d015      	beq.n	80040fa <HAL_TIM_Base_Start+0x86>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d4:	d011      	beq.n	80040fa <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	e008      	b.n	80040fa <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0201 	orr.w	r2, r2, #1
 80040f6:	601a      	str	r2, [r3, #0]
 80040f8:	e000      	b.n	80040fc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40012c00 	.word	0x40012c00
 8004110:	40000400 	.word	0x40000400
 8004114:	40014000 	.word	0x40014000
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10f      	bne.n	8004154 <HAL_TIM_Base_Stop+0x38>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	f240 4344 	movw	r3, #1092	@ 0x444
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d107      	bne.n	8004154 <HAL_TIM_Base_Stop+0x38>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d101      	bne.n	8004182 <HAL_TIM_GenerateEvent+0x18>
 800417e:	2302      	movs	r3, #2
 8004180:	e014      	b.n	80041ac <HAL_TIM_GenerateEvent+0x42>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIM_ConfigClockSource+0x1c>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e0b6      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x18a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd8>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x170>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x176>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004228:	2b70      	cmp	r3, #112	@ 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xaa>
 800422c:	2b70      	cmp	r3, #112	@ 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004230:	2b60      	cmp	r3, #96	@ 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11e>
 8004234:	2b60      	cmp	r3, #96	@ 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004238:	2b50      	cmp	r3, #80	@ 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfe>
 800423c:	2b50      	cmp	r3, #80	@ 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13e>
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004248:	2b30      	cmp	r3, #48	@ 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15e>
 800424c:	2b30      	cmp	r3, #48	@ 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15e>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15e>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15e>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	f000 f969 	bl	8004548 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	f000 f952 	bl	8004548 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 f8c6 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	@ 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f91f 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 f8e5 	bl	80044b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	@ 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f90f 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 f8a6 	bl	8004454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	@ 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f8ff 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 f8f6 	bl	8004512 <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <TIM_Base_SetConfig+0xf4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d007      	beq.n	8004374 <TIM_Base_SetConfig+0x28>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x28>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a35      	ldr	r2, [pc, #212]	@ (8004444 <TIM_Base_SetConfig+0xf8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a2d      	ldr	r2, [pc, #180]	@ (8004440 <TIM_Base_SetConfig+0xf4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <TIM_Base_SetConfig+0x6a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004394:	d00f      	beq.n	80043b6 <TIM_Base_SetConfig+0x6a>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2a      	ldr	r2, [pc, #168]	@ (8004444 <TIM_Base_SetConfig+0xf8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <TIM_Base_SetConfig+0x6a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a29      	ldr	r2, [pc, #164]	@ (8004448 <TIM_Base_SetConfig+0xfc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <TIM_Base_SetConfig+0x6a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a28      	ldr	r2, [pc, #160]	@ (800444c <TIM_Base_SetConfig+0x100>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_Base_SetConfig+0x6a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a27      	ldr	r2, [pc, #156]	@ (8004450 <TIM_Base_SetConfig+0x104>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d108      	bne.n	80043c8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a14      	ldr	r2, [pc, #80]	@ (8004440 <TIM_Base_SetConfig+0xf4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d00b      	beq.n	800440c <TIM_Base_SetConfig+0xc0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a14      	ldr	r2, [pc, #80]	@ (8004448 <TIM_Base_SetConfig+0xfc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d007      	beq.n	800440c <TIM_Base_SetConfig+0xc0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a13      	ldr	r2, [pc, #76]	@ (800444c <TIM_Base_SetConfig+0x100>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d003      	beq.n	800440c <TIM_Base_SetConfig+0xc0>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <TIM_Base_SetConfig+0x104>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d103      	bne.n	8004414 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	691a      	ldr	r2, [r3, #16]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b01      	cmp	r3, #1
 8004424:	d105      	bne.n	8004432 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]
  }
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00
 8004444:	40000400 	.word	0x40000400
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400
 8004450:	40014800 	.word	0x40014800

08004454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f023 030a 	bic.w	r3, r3, #10
 8004490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f023 0210 	bic.w	r2, r3, #16
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	031b      	lsls	r3, r3, #12
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	f043 0307 	orr.w	r3, r3, #7
 8004534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	021a      	lsls	r2, r3, #8
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	431a      	orrs	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	609a      	str	r2, [r3, #8]
}
 800457c:	bf00      	nop
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800459c:	2302      	movs	r3, #2
 800459e:	e054      	b.n	800464a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a24      	ldr	r2, [pc, #144]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80045d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a17      	ldr	r2, [pc, #92]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004608:	d009      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a11      	ldr	r2, [pc, #68]	@ (8004660 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10c      	bne.n	8004638 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	4313      	orrs	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40014000 	.word	0x40014000

08004664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e040      	b.n	80046f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fcae 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	@ 0x24
 8004690:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f95e 	bl	800496c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f825 	bl	8004700 <UART_SetConfig>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e01b      	b.n	80046f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9dd 	bl	8004ab0 <UART_CheckIdleState>
 80046f6:	4603      	mov	r3, r0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004708:	2300      	movs	r3, #0
 800470a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4b8a      	ldr	r3, [pc, #552]	@ (8004954 <UART_SetConfig+0x254>)
 800472c:	4013      	ands	r3, r2
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	6812      	ldr	r2, [r2, #0]
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	430b      	orrs	r3, r1
 8004736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a78      	ldr	r2, [pc, #480]	@ (8004958 <UART_SetConfig+0x258>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d120      	bne.n	80047be <UART_SetConfig+0xbe>
 800477c:	4b77      	ldr	r3, [pc, #476]	@ (800495c <UART_SetConfig+0x25c>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d817      	bhi.n	80047b8 <UART_SetConfig+0xb8>
 8004788:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <UART_SetConfig+0x90>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047b3 	.word	0x080047b3
 800479c:	080047a7 	.word	0x080047a7
 80047a0:	2300      	movs	r3, #0
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e01d      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e01a      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047ac:	2304      	movs	r3, #4
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e017      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047b2:	2308      	movs	r3, #8
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e014      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047b8:	2310      	movs	r3, #16
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e011      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <UART_SetConfig+0x260>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d102      	bne.n	80047ce <UART_SetConfig+0xce>
 80047c8:	2300      	movs	r3, #0
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e009      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a64      	ldr	r2, [pc, #400]	@ (8004964 <UART_SetConfig+0x264>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d102      	bne.n	80047de <UART_SetConfig+0xde>
 80047d8:	2300      	movs	r3, #0
 80047da:	77fb      	strb	r3, [r7, #31]
 80047dc:	e001      	b.n	80047e2 <UART_SetConfig+0xe2>
 80047de:	2310      	movs	r3, #16
 80047e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047ea:	d15a      	bne.n	80048a2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80047ec:	7ffb      	ldrb	r3, [r7, #31]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d827      	bhi.n	8004842 <UART_SetConfig+0x142>
 80047f2:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <UART_SetConfig+0xf8>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7ff fa68 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 8004820:	61b8      	str	r0, [r7, #24]
        break;
 8004822:	e013      	b.n	800484c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7ff fa86 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 8004828:	61b8      	str	r0, [r7, #24]
        break;
 800482a:	e00f      	b.n	800484c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b4e      	ldr	r3, [pc, #312]	@ (8004968 <UART_SetConfig+0x268>)
 800482e:	61bb      	str	r3, [r7, #24]
        break;
 8004830:	e00c      	b.n	800484c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7ff f9fd 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 8004836:	61b8      	str	r0, [r7, #24]
        break;
 8004838:	e008      	b.n	800484c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483e:	61bb      	str	r3, [r7, #24]
        break;
 8004840:	e004      	b.n	800484c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	77bb      	strb	r3, [r7, #30]
        break;
 800484a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d074      	beq.n	800493c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	005a      	lsls	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	441a      	add	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	2b0f      	cmp	r3, #15
 800486c:	d916      	bls.n	800489c <UART_SetConfig+0x19c>
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004874:	d212      	bcs.n	800489c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	b29b      	uxth	r3, r3
 800487a:	f023 030f 	bic.w	r3, r3, #15
 800487e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	b29b      	uxth	r3, r3
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	b29a      	uxth	r2, r3
 800488c:	89fb      	ldrh	r3, [r7, #14]
 800488e:	4313      	orrs	r3, r2
 8004890:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	89fa      	ldrh	r2, [r7, #14]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	e04f      	b.n	800493c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	77bb      	strb	r3, [r7, #30]
 80048a0:	e04c      	b.n	800493c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d828      	bhi.n	80048fa <UART_SetConfig+0x1fa>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0x1b0>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048eb 	.word	0x080048eb
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048fb 	.word	0x080048fb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7ff fa0c 	bl	8003cf0 <HAL_RCC_GetPCLK1Freq>
 80048d8:	61b8      	str	r0, [r7, #24]
        break;
 80048da:	e013      	b.n	8004904 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048dc:	f7ff fa2a 	bl	8003d34 <HAL_RCC_GetPCLK2Freq>
 80048e0:	61b8      	str	r0, [r7, #24]
        break;
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <UART_SetConfig+0x268>)
 80048e6:	61bb      	str	r3, [r7, #24]
        break;
 80048e8:	e00c      	b.n	8004904 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7ff f9a1 	bl	8003c30 <HAL_RCC_GetSysClockFreq>
 80048ee:	61b8      	str	r0, [r7, #24]
        break;
 80048f0:	e008      	b.n	8004904 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048f6:	61bb      	str	r3, [r7, #24]
        break;
 80048f8:	e004      	b.n	8004904 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	77bb      	strb	r3, [r7, #30]
        break;
 8004902:	bf00      	nop
    }

    if (pclk != 0U)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	085a      	lsrs	r2, r3, #1
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b0f      	cmp	r3, #15
 8004922:	d909      	bls.n	8004938 <UART_SetConfig+0x238>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492a:	d205      	bcs.n	8004938 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	e001      	b.n	800493c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004948:	7fbb      	ldrb	r3, [r7, #30]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	efff69f3 	.word	0xefff69f3
 8004958:	40013800 	.word	0x40013800
 800495c:	40021000 	.word	0x40021000
 8004960:	40004400 	.word	0x40004400
 8004964:	40004800 	.word	0x40004800
 8004968:	007a1200 	.word	0x007a1200

0800496c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a6a:	d10a      	bne.n	8004a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b098      	sub	sp, #96	@ 0x60
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac0:	f7fc fbdc 	bl	800127c <HAL_GetTick>
 8004ac4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d12e      	bne.n	8004b32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f88c 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d021      	beq.n	8004b32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b0e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e062      	b.n	8004bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d149      	bne.n	8004bd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f856 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03c      	beq.n	8004bd4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	623b      	str	r3, [r7, #32]
   return(result);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bac:	61fa      	str	r2, [r7, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e011      	b.n	8004bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3758      	adds	r7, #88	@ 0x58
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	e04f      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d04b      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fc fb2f 	bl	800127c <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e04e      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d037      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b80      	cmp	r3, #128	@ 0x80
 8004c46:	d034      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b40      	cmp	r3, #64	@ 0x40
 8004c4c:	d031      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d110      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2208      	movs	r2, #8
 8004c62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f838 	bl	8004cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e029      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c8c:	d111      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f81e 	bl	8004cda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e00f      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d0a0      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b095      	sub	sp, #84	@ 0x54
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	e853 3f00 	ldrex	r3, [r3]
 8004cee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e6      	bne.n	8004ce2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d36:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d118      	bne.n	8004d82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0310 	bic.w	r3, r3, #16
 8004d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	6979      	ldr	r1, [r7, #20]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e6      	bne.n	8004d50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d96:	bf00      	nop
 8004d98:	3754      	adds	r7, #84	@ 0x54
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <siprintf>:
 8004da4:	b40e      	push	{r1, r2, r3}
 8004da6:	b500      	push	{lr}
 8004da8:	b09c      	sub	sp, #112	@ 0x70
 8004daa:	ab1d      	add	r3, sp, #116	@ 0x74
 8004dac:	9002      	str	r0, [sp, #8]
 8004dae:	9006      	str	r0, [sp, #24]
 8004db0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004db4:	4809      	ldr	r0, [pc, #36]	@ (8004ddc <siprintf+0x38>)
 8004db6:	9107      	str	r1, [sp, #28]
 8004db8:	9104      	str	r1, [sp, #16]
 8004dba:	4909      	ldr	r1, [pc, #36]	@ (8004de0 <siprintf+0x3c>)
 8004dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc0:	9105      	str	r1, [sp, #20]
 8004dc2:	6800      	ldr	r0, [r0, #0]
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	a902      	add	r1, sp, #8
 8004dc8:	f000 f9bc 	bl	8005144 <_svfiprintf_r>
 8004dcc:	9b02      	ldr	r3, [sp, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
 8004dd2:	b01c      	add	sp, #112	@ 0x70
 8004dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd8:	b003      	add	sp, #12
 8004dda:	4770      	bx	lr
 8004ddc:	20000118 	.word	0x20000118
 8004de0:	ffff0208 	.word	0xffff0208

08004de4 <memmove>:
 8004de4:	4288      	cmp	r0, r1
 8004de6:	b510      	push	{r4, lr}
 8004de8:	eb01 0402 	add.w	r4, r1, r2
 8004dec:	d902      	bls.n	8004df4 <memmove+0x10>
 8004dee:	4284      	cmp	r4, r0
 8004df0:	4623      	mov	r3, r4
 8004df2:	d807      	bhi.n	8004e04 <memmove+0x20>
 8004df4:	1e43      	subs	r3, r0, #1
 8004df6:	42a1      	cmp	r1, r4
 8004df8:	d008      	beq.n	8004e0c <memmove+0x28>
 8004dfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e02:	e7f8      	b.n	8004df6 <memmove+0x12>
 8004e04:	4402      	add	r2, r0
 8004e06:	4601      	mov	r1, r0
 8004e08:	428a      	cmp	r2, r1
 8004e0a:	d100      	bne.n	8004e0e <memmove+0x2a>
 8004e0c:	bd10      	pop	{r4, pc}
 8004e0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e16:	e7f7      	b.n	8004e08 <memmove+0x24>

08004e18 <memset>:
 8004e18:	4402      	add	r2, r0
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d100      	bne.n	8004e22 <memset+0xa>
 8004e20:	4770      	bx	lr
 8004e22:	f803 1b01 	strb.w	r1, [r3], #1
 8004e26:	e7f9      	b.n	8004e1c <memset+0x4>

08004e28 <__errno>:
 8004e28:	4b01      	ldr	r3, [pc, #4]	@ (8004e30 <__errno+0x8>)
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000118 	.word	0x20000118

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	@ (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	@ (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	@ (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	@ (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 fc4c 	bl	80056e4 <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	08005f04 	.word	0x08005f04
 8004e70:	08005f04 	.word	0x08005f04
 8004e74:	08005f04 	.word	0x08005f04
 8004e78:	08005f08 	.word	0x08005f08

08004e7c <__retarget_lock_acquire_recursive>:
 8004e7c:	4770      	bx	lr

08004e7e <__retarget_lock_release_recursive>:
 8004e7e:	4770      	bx	lr

08004e80 <memcpy>:
 8004e80:	440a      	add	r2, r1
 8004e82:	4291      	cmp	r1, r2
 8004e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e88:	d100      	bne.n	8004e8c <memcpy+0xc>
 8004e8a:	4770      	bx	lr
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e96:	4291      	cmp	r1, r2
 8004e98:	d1f9      	bne.n	8004e8e <memcpy+0xe>
 8004e9a:	bd10      	pop	{r4, pc}

08004e9c <_free_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d041      	beq.n	8004f28 <_free_r+0x8c>
 8004ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea8:	1f0c      	subs	r4, r1, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	bfb8      	it	lt
 8004eae:	18e4      	addlt	r4, r4, r3
 8004eb0:	f000 f8e0 	bl	8005074 <__malloc_lock>
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8004f2c <_free_r+0x90>)
 8004eb6:	6813      	ldr	r3, [r2, #0]
 8004eb8:	b933      	cbnz	r3, 8004ec8 <_free_r+0x2c>
 8004eba:	6063      	str	r3, [r4, #4]
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec4:	f000 b8dc 	b.w	8005080 <__malloc_unlock>
 8004ec8:	42a3      	cmp	r3, r4
 8004eca:	d908      	bls.n	8004ede <_free_r+0x42>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	1821      	adds	r1, r4, r0
 8004ed0:	428b      	cmp	r3, r1
 8004ed2:	bf01      	itttt	eq
 8004ed4:	6819      	ldreq	r1, [r3, #0]
 8004ed6:	685b      	ldreq	r3, [r3, #4]
 8004ed8:	1809      	addeq	r1, r1, r0
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	e7ed      	b.n	8004eba <_free_r+0x1e>
 8004ede:	461a      	mov	r2, r3
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	b10b      	cbz	r3, 8004ee8 <_free_r+0x4c>
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	d9fa      	bls.n	8004ede <_free_r+0x42>
 8004ee8:	6811      	ldr	r1, [r2, #0]
 8004eea:	1850      	adds	r0, r2, r1
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d10b      	bne.n	8004f08 <_free_r+0x6c>
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	1850      	adds	r0, r2, r1
 8004ef6:	4283      	cmp	r3, r0
 8004ef8:	6011      	str	r1, [r2, #0]
 8004efa:	d1e0      	bne.n	8004ebe <_free_r+0x22>
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	4408      	add	r0, r1
 8004f04:	6010      	str	r0, [r2, #0]
 8004f06:	e7da      	b.n	8004ebe <_free_r+0x22>
 8004f08:	d902      	bls.n	8004f10 <_free_r+0x74>
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	602b      	str	r3, [r5, #0]
 8004f0e:	e7d6      	b.n	8004ebe <_free_r+0x22>
 8004f10:	6820      	ldr	r0, [r4, #0]
 8004f12:	1821      	adds	r1, r4, r0
 8004f14:	428b      	cmp	r3, r1
 8004f16:	bf04      	itt	eq
 8004f18:	6819      	ldreq	r1, [r3, #0]
 8004f1a:	685b      	ldreq	r3, [r3, #4]
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	bf04      	itt	eq
 8004f20:	1809      	addeq	r1, r1, r0
 8004f22:	6021      	streq	r1, [r4, #0]
 8004f24:	6054      	str	r4, [r2, #4]
 8004f26:	e7ca      	b.n	8004ebe <_free_r+0x22>
 8004f28:	bd38      	pop	{r3, r4, r5, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000860 	.word	0x20000860

08004f30 <sbrk_aligned>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	4e0f      	ldr	r6, [pc, #60]	@ (8004f70 <sbrk_aligned+0x40>)
 8004f34:	460c      	mov	r4, r1
 8004f36:	6831      	ldr	r1, [r6, #0]
 8004f38:	4605      	mov	r5, r0
 8004f3a:	b911      	cbnz	r1, 8004f42 <sbrk_aligned+0x12>
 8004f3c:	f000 fb8c 	bl	8005658 <_sbrk_r>
 8004f40:	6030      	str	r0, [r6, #0]
 8004f42:	4621      	mov	r1, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 fb87 	bl	8005658 <_sbrk_r>
 8004f4a:	1c43      	adds	r3, r0, #1
 8004f4c:	d103      	bne.n	8004f56 <sbrk_aligned+0x26>
 8004f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8004f52:	4620      	mov	r0, r4
 8004f54:	bd70      	pop	{r4, r5, r6, pc}
 8004f56:	1cc4      	adds	r4, r0, #3
 8004f58:	f024 0403 	bic.w	r4, r4, #3
 8004f5c:	42a0      	cmp	r0, r4
 8004f5e:	d0f8      	beq.n	8004f52 <sbrk_aligned+0x22>
 8004f60:	1a21      	subs	r1, r4, r0
 8004f62:	4628      	mov	r0, r5
 8004f64:	f000 fb78 	bl	8005658 <_sbrk_r>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d1f2      	bne.n	8004f52 <sbrk_aligned+0x22>
 8004f6c:	e7ef      	b.n	8004f4e <sbrk_aligned+0x1e>
 8004f6e:	bf00      	nop
 8004f70:	2000085c 	.word	0x2000085c

08004f74 <_malloc_r>:
 8004f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f78:	1ccd      	adds	r5, r1, #3
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	4606      	mov	r6, r0
 8004f8a:	db01      	blt.n	8004f90 <_malloc_r+0x1c>
 8004f8c:	42a9      	cmp	r1, r5
 8004f8e:	d904      	bls.n	8004f9a <_malloc_r+0x26>
 8004f90:	230c      	movs	r3, #12
 8004f92:	6033      	str	r3, [r6, #0]
 8004f94:	2000      	movs	r0, #0
 8004f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005070 <_malloc_r+0xfc>
 8004f9e:	f000 f869 	bl	8005074 <__malloc_lock>
 8004fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa6:	461c      	mov	r4, r3
 8004fa8:	bb44      	cbnz	r4, 8004ffc <_malloc_r+0x88>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff ffbf 	bl	8004f30 <sbrk_aligned>
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	d158      	bne.n	800506a <_malloc_r+0xf6>
 8004fb8:	f8d8 4000 	ldr.w	r4, [r8]
 8004fbc:	4627      	mov	r7, r4
 8004fbe:	2f00      	cmp	r7, #0
 8004fc0:	d143      	bne.n	800504a <_malloc_r+0xd6>
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d04b      	beq.n	800505e <_malloc_r+0xea>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	4639      	mov	r1, r7
 8004fca:	4630      	mov	r0, r6
 8004fcc:	eb04 0903 	add.w	r9, r4, r3
 8004fd0:	f000 fb42 	bl	8005658 <_sbrk_r>
 8004fd4:	4581      	cmp	r9, r0
 8004fd6:	d142      	bne.n	800505e <_malloc_r+0xea>
 8004fd8:	6821      	ldr	r1, [r4, #0]
 8004fda:	1a6d      	subs	r5, r5, r1
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f7ff ffa6 	bl	8004f30 <sbrk_aligned>
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	d03a      	beq.n	800505e <_malloc_r+0xea>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	442b      	add	r3, r5
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	bb62      	cbnz	r2, 8005050 <_malloc_r+0xdc>
 8004ff6:	f8c8 7000 	str.w	r7, [r8]
 8004ffa:	e00f      	b.n	800501c <_malloc_r+0xa8>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	1b52      	subs	r2, r2, r5
 8005000:	d420      	bmi.n	8005044 <_malloc_r+0xd0>
 8005002:	2a0b      	cmp	r2, #11
 8005004:	d917      	bls.n	8005036 <_malloc_r+0xc2>
 8005006:	1961      	adds	r1, r4, r5
 8005008:	42a3      	cmp	r3, r4
 800500a:	6025      	str	r5, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	6059      	strne	r1, [r3, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	bf08      	it	eq
 8005014:	f8c8 1000 	streq.w	r1, [r8]
 8005018:	5162      	str	r2, [r4, r5]
 800501a:	604b      	str	r3, [r1, #4]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f82f 	bl	8005080 <__malloc_unlock>
 8005022:	f104 000b 	add.w	r0, r4, #11
 8005026:	1d23      	adds	r3, r4, #4
 8005028:	f020 0007 	bic.w	r0, r0, #7
 800502c:	1ac2      	subs	r2, r0, r3
 800502e:	bf1c      	itt	ne
 8005030:	1a1b      	subne	r3, r3, r0
 8005032:	50a3      	strne	r3, [r4, r2]
 8005034:	e7af      	b.n	8004f96 <_malloc_r+0x22>
 8005036:	6862      	ldr	r2, [r4, #4]
 8005038:	42a3      	cmp	r3, r4
 800503a:	bf0c      	ite	eq
 800503c:	f8c8 2000 	streq.w	r2, [r8]
 8005040:	605a      	strne	r2, [r3, #4]
 8005042:	e7eb      	b.n	800501c <_malloc_r+0xa8>
 8005044:	4623      	mov	r3, r4
 8005046:	6864      	ldr	r4, [r4, #4]
 8005048:	e7ae      	b.n	8004fa8 <_malloc_r+0x34>
 800504a:	463c      	mov	r4, r7
 800504c:	687f      	ldr	r7, [r7, #4]
 800504e:	e7b6      	b.n	8004fbe <_malloc_r+0x4a>
 8005050:	461a      	mov	r2, r3
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	42a3      	cmp	r3, r4
 8005056:	d1fb      	bne.n	8005050 <_malloc_r+0xdc>
 8005058:	2300      	movs	r3, #0
 800505a:	6053      	str	r3, [r2, #4]
 800505c:	e7de      	b.n	800501c <_malloc_r+0xa8>
 800505e:	230c      	movs	r3, #12
 8005060:	6033      	str	r3, [r6, #0]
 8005062:	4630      	mov	r0, r6
 8005064:	f000 f80c 	bl	8005080 <__malloc_unlock>
 8005068:	e794      	b.n	8004f94 <_malloc_r+0x20>
 800506a:	6005      	str	r5, [r0, #0]
 800506c:	e7d6      	b.n	800501c <_malloc_r+0xa8>
 800506e:	bf00      	nop
 8005070:	20000860 	.word	0x20000860

08005074 <__malloc_lock>:
 8005074:	4801      	ldr	r0, [pc, #4]	@ (800507c <__malloc_lock+0x8>)
 8005076:	f7ff bf01 	b.w	8004e7c <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	20000858 	.word	0x20000858

08005080 <__malloc_unlock>:
 8005080:	4801      	ldr	r0, [pc, #4]	@ (8005088 <__malloc_unlock+0x8>)
 8005082:	f7ff befc 	b.w	8004e7e <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	20000858 	.word	0x20000858

0800508c <__ssputs_r>:
 800508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	688e      	ldr	r6, [r1, #8]
 8005092:	461f      	mov	r7, r3
 8005094:	42be      	cmp	r6, r7
 8005096:	680b      	ldr	r3, [r1, #0]
 8005098:	4682      	mov	sl, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4690      	mov	r8, r2
 800509e:	d82d      	bhi.n	80050fc <__ssputs_r+0x70>
 80050a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050a8:	d026      	beq.n	80050f8 <__ssputs_r+0x6c>
 80050aa:	6965      	ldr	r5, [r4, #20]
 80050ac:	6909      	ldr	r1, [r1, #16]
 80050ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b2:	eba3 0901 	sub.w	r9, r3, r1
 80050b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050ba:	1c7b      	adds	r3, r7, #1
 80050bc:	444b      	add	r3, r9
 80050be:	106d      	asrs	r5, r5, #1
 80050c0:	429d      	cmp	r5, r3
 80050c2:	bf38      	it	cc
 80050c4:	461d      	movcc	r5, r3
 80050c6:	0553      	lsls	r3, r2, #21
 80050c8:	d527      	bpl.n	800511a <__ssputs_r+0x8e>
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7ff ff52 	bl	8004f74 <_malloc_r>
 80050d0:	4606      	mov	r6, r0
 80050d2:	b360      	cbz	r0, 800512e <__ssputs_r+0xa2>
 80050d4:	6921      	ldr	r1, [r4, #16]
 80050d6:	464a      	mov	r2, r9
 80050d8:	f7ff fed2 	bl	8004e80 <memcpy>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	6126      	str	r6, [r4, #16]
 80050ea:	6165      	str	r5, [r4, #20]
 80050ec:	444e      	add	r6, r9
 80050ee:	eba5 0509 	sub.w	r5, r5, r9
 80050f2:	6026      	str	r6, [r4, #0]
 80050f4:	60a5      	str	r5, [r4, #8]
 80050f6:	463e      	mov	r6, r7
 80050f8:	42be      	cmp	r6, r7
 80050fa:	d900      	bls.n	80050fe <__ssputs_r+0x72>
 80050fc:	463e      	mov	r6, r7
 80050fe:	6820      	ldr	r0, [r4, #0]
 8005100:	4632      	mov	r2, r6
 8005102:	4641      	mov	r1, r8
 8005104:	f7ff fe6e 	bl	8004de4 <memmove>
 8005108:	68a3      	ldr	r3, [r4, #8]
 800510a:	1b9b      	subs	r3, r3, r6
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	4433      	add	r3, r6
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	2000      	movs	r0, #0
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	462a      	mov	r2, r5
 800511c:	f000 faac 	bl	8005678 <_realloc_r>
 8005120:	4606      	mov	r6, r0
 8005122:	2800      	cmp	r0, #0
 8005124:	d1e0      	bne.n	80050e8 <__ssputs_r+0x5c>
 8005126:	6921      	ldr	r1, [r4, #16]
 8005128:	4650      	mov	r0, sl
 800512a:	f7ff feb7 	bl	8004e9c <_free_r>
 800512e:	230c      	movs	r3, #12
 8005130:	f8ca 3000 	str.w	r3, [sl]
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800513a:	81a3      	strh	r3, [r4, #12]
 800513c:	f04f 30ff 	mov.w	r0, #4294967295
 8005140:	e7e9      	b.n	8005116 <__ssputs_r+0x8a>
	...

08005144 <_svfiprintf_r>:
 8005144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	4698      	mov	r8, r3
 800514a:	898b      	ldrh	r3, [r1, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	b09d      	sub	sp, #116	@ 0x74
 8005150:	4607      	mov	r7, r0
 8005152:	460d      	mov	r5, r1
 8005154:	4614      	mov	r4, r2
 8005156:	d510      	bpl.n	800517a <_svfiprintf_r+0x36>
 8005158:	690b      	ldr	r3, [r1, #16]
 800515a:	b973      	cbnz	r3, 800517a <_svfiprintf_r+0x36>
 800515c:	2140      	movs	r1, #64	@ 0x40
 800515e:	f7ff ff09 	bl	8004f74 <_malloc_r>
 8005162:	6028      	str	r0, [r5, #0]
 8005164:	6128      	str	r0, [r5, #16]
 8005166:	b930      	cbnz	r0, 8005176 <_svfiprintf_r+0x32>
 8005168:	230c      	movs	r3, #12
 800516a:	603b      	str	r3, [r7, #0]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b01d      	add	sp, #116	@ 0x74
 8005172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005176:	2340      	movs	r3, #64	@ 0x40
 8005178:	616b      	str	r3, [r5, #20]
 800517a:	2300      	movs	r3, #0
 800517c:	9309      	str	r3, [sp, #36]	@ 0x24
 800517e:	2320      	movs	r3, #32
 8005180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005184:	f8cd 800c 	str.w	r8, [sp, #12]
 8005188:	2330      	movs	r3, #48	@ 0x30
 800518a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005328 <_svfiprintf_r+0x1e4>
 800518e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005192:	f04f 0901 	mov.w	r9, #1
 8005196:	4623      	mov	r3, r4
 8005198:	469a      	mov	sl, r3
 800519a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800519e:	b10a      	cbz	r2, 80051a4 <_svfiprintf_r+0x60>
 80051a0:	2a25      	cmp	r2, #37	@ 0x25
 80051a2:	d1f9      	bne.n	8005198 <_svfiprintf_r+0x54>
 80051a4:	ebba 0b04 	subs.w	fp, sl, r4
 80051a8:	d00b      	beq.n	80051c2 <_svfiprintf_r+0x7e>
 80051aa:	465b      	mov	r3, fp
 80051ac:	4622      	mov	r2, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	4638      	mov	r0, r7
 80051b2:	f7ff ff6b 	bl	800508c <__ssputs_r>
 80051b6:	3001      	adds	r0, #1
 80051b8:	f000 80a7 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051be:	445a      	add	r2, fp
 80051c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80051c2:	f89a 3000 	ldrb.w	r3, [sl]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 809f 	beq.w	800530a <_svfiprintf_r+0x1c6>
 80051cc:	2300      	movs	r3, #0
 80051ce:	f04f 32ff 	mov.w	r2, #4294967295
 80051d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051d6:	f10a 0a01 	add.w	sl, sl, #1
 80051da:	9304      	str	r3, [sp, #16]
 80051dc:	9307      	str	r3, [sp, #28]
 80051de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80051e4:	4654      	mov	r4, sl
 80051e6:	2205      	movs	r2, #5
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	484e      	ldr	r0, [pc, #312]	@ (8005328 <_svfiprintf_r+0x1e4>)
 80051ee:	f7fa ffef 	bl	80001d0 <memchr>
 80051f2:	9a04      	ldr	r2, [sp, #16]
 80051f4:	b9d8      	cbnz	r0, 800522e <_svfiprintf_r+0xea>
 80051f6:	06d0      	lsls	r0, r2, #27
 80051f8:	bf44      	itt	mi
 80051fa:	2320      	movmi	r3, #32
 80051fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005200:	0711      	lsls	r1, r2, #28
 8005202:	bf44      	itt	mi
 8005204:	232b      	movmi	r3, #43	@ 0x2b
 8005206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520a:	f89a 3000 	ldrb.w	r3, [sl]
 800520e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005210:	d015      	beq.n	800523e <_svfiprintf_r+0xfa>
 8005212:	9a07      	ldr	r2, [sp, #28]
 8005214:	4654      	mov	r4, sl
 8005216:	2000      	movs	r0, #0
 8005218:	f04f 0c0a 	mov.w	ip, #10
 800521c:	4621      	mov	r1, r4
 800521e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005222:	3b30      	subs	r3, #48	@ 0x30
 8005224:	2b09      	cmp	r3, #9
 8005226:	d94b      	bls.n	80052c0 <_svfiprintf_r+0x17c>
 8005228:	b1b0      	cbz	r0, 8005258 <_svfiprintf_r+0x114>
 800522a:	9207      	str	r2, [sp, #28]
 800522c:	e014      	b.n	8005258 <_svfiprintf_r+0x114>
 800522e:	eba0 0308 	sub.w	r3, r0, r8
 8005232:	fa09 f303 	lsl.w	r3, r9, r3
 8005236:	4313      	orrs	r3, r2
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	46a2      	mov	sl, r4
 800523c:	e7d2      	b.n	80051e4 <_svfiprintf_r+0xa0>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	1d19      	adds	r1, r3, #4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	9103      	str	r1, [sp, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	bfbb      	ittet	lt
 800524a:	425b      	neglt	r3, r3
 800524c:	f042 0202 	orrlt.w	r2, r2, #2
 8005250:	9307      	strge	r3, [sp, #28]
 8005252:	9307      	strlt	r3, [sp, #28]
 8005254:	bfb8      	it	lt
 8005256:	9204      	strlt	r2, [sp, #16]
 8005258:	7823      	ldrb	r3, [r4, #0]
 800525a:	2b2e      	cmp	r3, #46	@ 0x2e
 800525c:	d10a      	bne.n	8005274 <_svfiprintf_r+0x130>
 800525e:	7863      	ldrb	r3, [r4, #1]
 8005260:	2b2a      	cmp	r3, #42	@ 0x2a
 8005262:	d132      	bne.n	80052ca <_svfiprintf_r+0x186>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	1d1a      	adds	r2, r3, #4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	9203      	str	r2, [sp, #12]
 800526c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005270:	3402      	adds	r4, #2
 8005272:	9305      	str	r3, [sp, #20]
 8005274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005338 <_svfiprintf_r+0x1f4>
 8005278:	7821      	ldrb	r1, [r4, #0]
 800527a:	2203      	movs	r2, #3
 800527c:	4650      	mov	r0, sl
 800527e:	f7fa ffa7 	bl	80001d0 <memchr>
 8005282:	b138      	cbz	r0, 8005294 <_svfiprintf_r+0x150>
 8005284:	9b04      	ldr	r3, [sp, #16]
 8005286:	eba0 000a 	sub.w	r0, r0, sl
 800528a:	2240      	movs	r2, #64	@ 0x40
 800528c:	4082      	lsls	r2, r0
 800528e:	4313      	orrs	r3, r2
 8005290:	3401      	adds	r4, #1
 8005292:	9304      	str	r3, [sp, #16]
 8005294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005298:	4824      	ldr	r0, [pc, #144]	@ (800532c <_svfiprintf_r+0x1e8>)
 800529a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800529e:	2206      	movs	r2, #6
 80052a0:	f7fa ff96 	bl	80001d0 <memchr>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d036      	beq.n	8005316 <_svfiprintf_r+0x1d2>
 80052a8:	4b21      	ldr	r3, [pc, #132]	@ (8005330 <_svfiprintf_r+0x1ec>)
 80052aa:	bb1b      	cbnz	r3, 80052f4 <_svfiprintf_r+0x1b0>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	3307      	adds	r3, #7
 80052b0:	f023 0307 	bic.w	r3, r3, #7
 80052b4:	3308      	adds	r3, #8
 80052b6:	9303      	str	r3, [sp, #12]
 80052b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ba:	4433      	add	r3, r6
 80052bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80052be:	e76a      	b.n	8005196 <_svfiprintf_r+0x52>
 80052c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c4:	460c      	mov	r4, r1
 80052c6:	2001      	movs	r0, #1
 80052c8:	e7a8      	b.n	800521c <_svfiprintf_r+0xd8>
 80052ca:	2300      	movs	r3, #0
 80052cc:	3401      	adds	r4, #1
 80052ce:	9305      	str	r3, [sp, #20]
 80052d0:	4619      	mov	r1, r3
 80052d2:	f04f 0c0a 	mov.w	ip, #10
 80052d6:	4620      	mov	r0, r4
 80052d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052dc:	3a30      	subs	r2, #48	@ 0x30
 80052de:	2a09      	cmp	r2, #9
 80052e0:	d903      	bls.n	80052ea <_svfiprintf_r+0x1a6>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0c6      	beq.n	8005274 <_svfiprintf_r+0x130>
 80052e6:	9105      	str	r1, [sp, #20]
 80052e8:	e7c4      	b.n	8005274 <_svfiprintf_r+0x130>
 80052ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ee:	4604      	mov	r4, r0
 80052f0:	2301      	movs	r3, #1
 80052f2:	e7f0      	b.n	80052d6 <_svfiprintf_r+0x192>
 80052f4:	ab03      	add	r3, sp, #12
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	462a      	mov	r2, r5
 80052fa:	4b0e      	ldr	r3, [pc, #56]	@ (8005334 <_svfiprintf_r+0x1f0>)
 80052fc:	a904      	add	r1, sp, #16
 80052fe:	4638      	mov	r0, r7
 8005300:	f3af 8000 	nop.w
 8005304:	1c42      	adds	r2, r0, #1
 8005306:	4606      	mov	r6, r0
 8005308:	d1d6      	bne.n	80052b8 <_svfiprintf_r+0x174>
 800530a:	89ab      	ldrh	r3, [r5, #12]
 800530c:	065b      	lsls	r3, r3, #25
 800530e:	f53f af2d 	bmi.w	800516c <_svfiprintf_r+0x28>
 8005312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005314:	e72c      	b.n	8005170 <_svfiprintf_r+0x2c>
 8005316:	ab03      	add	r3, sp, #12
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	462a      	mov	r2, r5
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <_svfiprintf_r+0x1f0>)
 800531e:	a904      	add	r1, sp, #16
 8005320:	4638      	mov	r0, r7
 8005322:	f000 f879 	bl	8005418 <_printf_i>
 8005326:	e7ed      	b.n	8005304 <_svfiprintf_r+0x1c0>
 8005328:	08005ec8 	.word	0x08005ec8
 800532c:	08005ed2 	.word	0x08005ed2
 8005330:	00000000 	.word	0x00000000
 8005334:	0800508d 	.word	0x0800508d
 8005338:	08005ece 	.word	0x08005ece

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4698      	mov	r8, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005388:	6822      	ldr	r2, [r4, #0]
 800538a:	3b00      	subs	r3, #0
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005398:	4641      	mov	r1, r8
 800539a:	4638      	mov	r0, r7
 800539c:	47c8      	blx	r9
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	f003 0306 	and.w	r3, r3, #6
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf02      	ittt	eq
 80053ae:	68e5      	ldreq	r5, [r4, #12]
 80053b0:	6833      	ldreq	r3, [r6, #0]
 80053b2:	1aed      	subeq	r5, r5, r3
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4641      	mov	r1, r8
 80053d8:	4638      	mov	r0, r7
 80053da:	47c8      	blx	r9
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	@ 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4641      	mov	r1, r8
 800540a:	4638      	mov	r0, r7
 800540c:	47c8      	blx	r9
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005420:	2f78      	cmp	r7, #120	@ 0x78
 8005422:	4691      	mov	r9, r2
 8005424:	4680      	mov	r8, r0
 8005426:	460c      	mov	r4, r1
 8005428:	469a      	mov	sl, r3
 800542a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	@ 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d2 	beq.w	80055de <_printf_i+0x1c6>
 800543a:	2f58      	cmp	r7, #88	@ 0x58
 800543c:	f000 80b9 	beq.w	80055b2 <_printf_i+0x19a>
 8005440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	@ (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055c5 	.word	0x080055c5
 8005488:	080054ef 	.word	0x080054ef
 800548c:	0800557f 	.word	0x0800557f
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055e7 	.word	0x080055e7
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054ef 	.word	0x080054ef
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	08005587 	.word	0x08005587
 80054b0:	6833      	ldr	r3, [r6, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6032      	str	r2, [r6, #0]
 80054b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e09d      	b.n	8005600 <_printf_i+0x1e8>
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	6820      	ldr	r0, [r4, #0]
 80054c8:	1d19      	adds	r1, r3, #4
 80054ca:	6031      	str	r1, [r6, #0]
 80054cc:	0606      	lsls	r6, r0, #24
 80054ce:	d501      	bpl.n	80054d4 <_printf_i+0xbc>
 80054d0:	681d      	ldr	r5, [r3, #0]
 80054d2:	e003      	b.n	80054dc <_printf_i+0xc4>
 80054d4:	0645      	lsls	r5, r0, #25
 80054d6:	d5fb      	bpl.n	80054d0 <_printf_i+0xb8>
 80054d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054dc:	2d00      	cmp	r5, #0
 80054de:	da03      	bge.n	80054e8 <_printf_i+0xd0>
 80054e0:	232d      	movs	r3, #45	@ 0x2d
 80054e2:	426d      	negs	r5, r5
 80054e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e8:	4859      	ldr	r0, [pc, #356]	@ (8005650 <_printf_i+0x238>)
 80054ea:	230a      	movs	r3, #10
 80054ec:	e011      	b.n	8005512 <_printf_i+0xfa>
 80054ee:	6821      	ldr	r1, [r4, #0]
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	0608      	lsls	r0, r1, #24
 80054f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80054f8:	d402      	bmi.n	8005500 <_printf_i+0xe8>
 80054fa:	0649      	lsls	r1, r1, #25
 80054fc:	bf48      	it	mi
 80054fe:	b2ad      	uxthmi	r5, r5
 8005500:	2f6f      	cmp	r7, #111	@ 0x6f
 8005502:	4853      	ldr	r0, [pc, #332]	@ (8005650 <_printf_i+0x238>)
 8005504:	6033      	str	r3, [r6, #0]
 8005506:	bf14      	ite	ne
 8005508:	230a      	movne	r3, #10
 800550a:	2308      	moveq	r3, #8
 800550c:	2100      	movs	r1, #0
 800550e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005512:	6866      	ldr	r6, [r4, #4]
 8005514:	60a6      	str	r6, [r4, #8]
 8005516:	2e00      	cmp	r6, #0
 8005518:	bfa2      	ittt	ge
 800551a:	6821      	ldrge	r1, [r4, #0]
 800551c:	f021 0104 	bicge.w	r1, r1, #4
 8005520:	6021      	strge	r1, [r4, #0]
 8005522:	b90d      	cbnz	r5, 8005528 <_printf_i+0x110>
 8005524:	2e00      	cmp	r6, #0
 8005526:	d04b      	beq.n	80055c0 <_printf_i+0x1a8>
 8005528:	4616      	mov	r6, r2
 800552a:	fbb5 f1f3 	udiv	r1, r5, r3
 800552e:	fb03 5711 	mls	r7, r3, r1, r5
 8005532:	5dc7      	ldrb	r7, [r0, r7]
 8005534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005538:	462f      	mov	r7, r5
 800553a:	42bb      	cmp	r3, r7
 800553c:	460d      	mov	r5, r1
 800553e:	d9f4      	bls.n	800552a <_printf_i+0x112>
 8005540:	2b08      	cmp	r3, #8
 8005542:	d10b      	bne.n	800555c <_printf_i+0x144>
 8005544:	6823      	ldr	r3, [r4, #0]
 8005546:	07df      	lsls	r7, r3, #31
 8005548:	d508      	bpl.n	800555c <_printf_i+0x144>
 800554a:	6923      	ldr	r3, [r4, #16]
 800554c:	6861      	ldr	r1, [r4, #4]
 800554e:	4299      	cmp	r1, r3
 8005550:	bfde      	ittt	le
 8005552:	2330      	movle	r3, #48	@ 0x30
 8005554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800555c:	1b92      	subs	r2, r2, r6
 800555e:	6122      	str	r2, [r4, #16]
 8005560:	f8cd a000 	str.w	sl, [sp]
 8005564:	464b      	mov	r3, r9
 8005566:	aa03      	add	r2, sp, #12
 8005568:	4621      	mov	r1, r4
 800556a:	4640      	mov	r0, r8
 800556c:	f7ff fee6 	bl	800533c <_printf_common>
 8005570:	3001      	adds	r0, #1
 8005572:	d14a      	bne.n	800560a <_printf_i+0x1f2>
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	b004      	add	sp, #16
 800557a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f043 0320 	orr.w	r3, r3, #32
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	4833      	ldr	r0, [pc, #204]	@ (8005654 <_printf_i+0x23c>)
 8005588:	2778      	movs	r7, #120	@ 0x78
 800558a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	6831      	ldr	r1, [r6, #0]
 8005592:	061f      	lsls	r7, r3, #24
 8005594:	f851 5b04 	ldr.w	r5, [r1], #4
 8005598:	d402      	bmi.n	80055a0 <_printf_i+0x188>
 800559a:	065f      	lsls	r7, r3, #25
 800559c:	bf48      	it	mi
 800559e:	b2ad      	uxthmi	r5, r5
 80055a0:	6031      	str	r1, [r6, #0]
 80055a2:	07d9      	lsls	r1, r3, #31
 80055a4:	bf44      	itt	mi
 80055a6:	f043 0320 	orrmi.w	r3, r3, #32
 80055aa:	6023      	strmi	r3, [r4, #0]
 80055ac:	b11d      	cbz	r5, 80055b6 <_printf_i+0x19e>
 80055ae:	2310      	movs	r3, #16
 80055b0:	e7ac      	b.n	800550c <_printf_i+0xf4>
 80055b2:	4827      	ldr	r0, [pc, #156]	@ (8005650 <_printf_i+0x238>)
 80055b4:	e7e9      	b.n	800558a <_printf_i+0x172>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	f023 0320 	bic.w	r3, r3, #32
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	e7f6      	b.n	80055ae <_printf_i+0x196>
 80055c0:	4616      	mov	r6, r2
 80055c2:	e7bd      	b.n	8005540 <_printf_i+0x128>
 80055c4:	6833      	ldr	r3, [r6, #0]
 80055c6:	6825      	ldr	r5, [r4, #0]
 80055c8:	6961      	ldr	r1, [r4, #20]
 80055ca:	1d18      	adds	r0, r3, #4
 80055cc:	6030      	str	r0, [r6, #0]
 80055ce:	062e      	lsls	r6, r5, #24
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	d501      	bpl.n	80055d8 <_printf_i+0x1c0>
 80055d4:	6019      	str	r1, [r3, #0]
 80055d6:	e002      	b.n	80055de <_printf_i+0x1c6>
 80055d8:	0668      	lsls	r0, r5, #25
 80055da:	d5fb      	bpl.n	80055d4 <_printf_i+0x1bc>
 80055dc:	8019      	strh	r1, [r3, #0]
 80055de:	2300      	movs	r3, #0
 80055e0:	6123      	str	r3, [r4, #16]
 80055e2:	4616      	mov	r6, r2
 80055e4:	e7bc      	b.n	8005560 <_printf_i+0x148>
 80055e6:	6833      	ldr	r3, [r6, #0]
 80055e8:	1d1a      	adds	r2, r3, #4
 80055ea:	6032      	str	r2, [r6, #0]
 80055ec:	681e      	ldr	r6, [r3, #0]
 80055ee:	6862      	ldr	r2, [r4, #4]
 80055f0:	2100      	movs	r1, #0
 80055f2:	4630      	mov	r0, r6
 80055f4:	f7fa fdec 	bl	80001d0 <memchr>
 80055f8:	b108      	cbz	r0, 80055fe <_printf_i+0x1e6>
 80055fa:	1b80      	subs	r0, r0, r6
 80055fc:	6060      	str	r0, [r4, #4]
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	6123      	str	r3, [r4, #16]
 8005602:	2300      	movs	r3, #0
 8005604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005608:	e7aa      	b.n	8005560 <_printf_i+0x148>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	4632      	mov	r2, r6
 800560e:	4649      	mov	r1, r9
 8005610:	4640      	mov	r0, r8
 8005612:	47d0      	blx	sl
 8005614:	3001      	adds	r0, #1
 8005616:	d0ad      	beq.n	8005574 <_printf_i+0x15c>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	d413      	bmi.n	8005646 <_printf_i+0x22e>
 800561e:	68e0      	ldr	r0, [r4, #12]
 8005620:	9b03      	ldr	r3, [sp, #12]
 8005622:	4298      	cmp	r0, r3
 8005624:	bfb8      	it	lt
 8005626:	4618      	movlt	r0, r3
 8005628:	e7a6      	b.n	8005578 <_printf_i+0x160>
 800562a:	2301      	movs	r3, #1
 800562c:	4632      	mov	r2, r6
 800562e:	4649      	mov	r1, r9
 8005630:	4640      	mov	r0, r8
 8005632:	47d0      	blx	sl
 8005634:	3001      	adds	r0, #1
 8005636:	d09d      	beq.n	8005574 <_printf_i+0x15c>
 8005638:	3501      	adds	r5, #1
 800563a:	68e3      	ldr	r3, [r4, #12]
 800563c:	9903      	ldr	r1, [sp, #12]
 800563e:	1a5b      	subs	r3, r3, r1
 8005640:	42ab      	cmp	r3, r5
 8005642:	dcf2      	bgt.n	800562a <_printf_i+0x212>
 8005644:	e7eb      	b.n	800561e <_printf_i+0x206>
 8005646:	2500      	movs	r5, #0
 8005648:	f104 0619 	add.w	r6, r4, #25
 800564c:	e7f5      	b.n	800563a <_printf_i+0x222>
 800564e:	bf00      	nop
 8005650:	08005ed9 	.word	0x08005ed9
 8005654:	08005eea 	.word	0x08005eea

08005658 <_sbrk_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	@ (8005674 <_sbrk_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb fd3e 	bl	80010e4 <_sbrk>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_sbrk_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_sbrk_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	20000854 	.word	0x20000854

08005678 <_realloc_r>:
 8005678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567c:	4680      	mov	r8, r0
 800567e:	4615      	mov	r5, r2
 8005680:	460c      	mov	r4, r1
 8005682:	b921      	cbnz	r1, 800568e <_realloc_r+0x16>
 8005684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	4611      	mov	r1, r2
 800568a:	f7ff bc73 	b.w	8004f74 <_malloc_r>
 800568e:	b92a      	cbnz	r2, 800569c <_realloc_r+0x24>
 8005690:	f7ff fc04 	bl	8004e9c <_free_r>
 8005694:	2400      	movs	r4, #0
 8005696:	4620      	mov	r0, r4
 8005698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800569c:	f000 f81a 	bl	80056d4 <_malloc_usable_size_r>
 80056a0:	4285      	cmp	r5, r0
 80056a2:	4606      	mov	r6, r0
 80056a4:	d802      	bhi.n	80056ac <_realloc_r+0x34>
 80056a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056aa:	d8f4      	bhi.n	8005696 <_realloc_r+0x1e>
 80056ac:	4629      	mov	r1, r5
 80056ae:	4640      	mov	r0, r8
 80056b0:	f7ff fc60 	bl	8004f74 <_malloc_r>
 80056b4:	4607      	mov	r7, r0
 80056b6:	2800      	cmp	r0, #0
 80056b8:	d0ec      	beq.n	8005694 <_realloc_r+0x1c>
 80056ba:	42b5      	cmp	r5, r6
 80056bc:	462a      	mov	r2, r5
 80056be:	4621      	mov	r1, r4
 80056c0:	bf28      	it	cs
 80056c2:	4632      	movcs	r2, r6
 80056c4:	f7ff fbdc 	bl	8004e80 <memcpy>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4640      	mov	r0, r8
 80056cc:	f7ff fbe6 	bl	8004e9c <_free_r>
 80056d0:	463c      	mov	r4, r7
 80056d2:	e7e0      	b.n	8005696 <_realloc_r+0x1e>

080056d4 <_malloc_usable_size_r>:
 80056d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d8:	1f18      	subs	r0, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bfbc      	itt	lt
 80056de:	580b      	ldrlt	r3, [r1, r0]
 80056e0:	18c0      	addlt	r0, r0, r3
 80056e2:	4770      	bx	lr

080056e4 <_init>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	bf00      	nop
 80056e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ea:	bc08      	pop	{r3}
 80056ec:	469e      	mov	lr, r3
 80056ee:	4770      	bx	lr

080056f0 <_fini>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr
